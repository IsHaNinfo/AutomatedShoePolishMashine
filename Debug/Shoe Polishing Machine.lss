
Shoe Polishing Machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000180  00800060  000014b4  00001548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008001e0  008001e0  000016c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a4b  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081d  00000000  00000000  0000425f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010a0  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00005b1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055c  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019d3  00000000  00000000  00006320  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00007cf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 80 04 	jmp	0x900	; 0x900 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 eb       	ldi	r30, 0xB4	; 180
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3e       	cpi	r26, 0xE7	; 231
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 58 0a 	jmp	0x14b0	; 0x14b0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_cmd>:
void lcd_rc(char row,char colm);
void LoadingScr();

void lcd_cmd(unsigned char cmd)
{
	lcd_port = (lcd_port & 0x0F)|(cmd & 0xF0); //sending upper nibble
      92:	95 b3       	in	r25, 0x15	; 21
      94:	9f 70       	andi	r25, 0x0F	; 15
      96:	28 2f       	mov	r18, r24
      98:	20 7f       	andi	r18, 0xF0	; 240
      9a:	92 2b       	or	r25, r18
      9c:	95 bb       	out	0x15, r25	; 21
	lcd_port &=~(1<<RS); //set to cmd ,RS=0 for cmd
      9e:	95 b3       	in	r25, 0x15	; 21
      a0:	9b 7f       	andi	r25, 0xFB	; 251
      a2:	95 bb       	out	0x15, r25	; 21
	lcd_port |=(1<<EN); // Enable pulse
      a4:	95 b3       	in	r25, 0x15	; 21
      a6:	98 60       	ori	r25, 0x08	; 8
      a8:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	35 e0       	ldi	r19, 0x05	; 5
      ac:	3a 95       	dec	r19
      ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd+0x1a>
      b0:	00 00       	nop
	_delay_us(1);
	lcd_port &=~(1<<EN);	//disable pulse
      b2:	95 b3       	in	r25, 0x15	; 21
      b4:	97 7f       	andi	r25, 0xF7	; 247
      b6:	95 bb       	out	0x15, r25	; 21
      b8:	ef e1       	ldi	r30, 0x1F	; 31
      ba:	f3 e0       	ldi	r31, 0x03	; 3
      bc:	31 97       	sbiw	r30, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <lcd_cmd+0x2a>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_cmd+0x30>
      c2:	00 00       	nop
	_delay_us(200);
	
	lcd_port =(lcd_port & 0x0F)|(cmd<<4); //sending low nibble
      c4:	25 b3       	in	r18, 0x15	; 21
      c6:	f0 e1       	ldi	r31, 0x10	; 16
      c8:	8f 9f       	mul	r24, r31
      ca:	c0 01       	movw	r24, r0
      cc:	11 24       	eor	r1, r1
      ce:	92 2f       	mov	r25, r18
      d0:	9f 70       	andi	r25, 0x0F	; 15
      d2:	89 2b       	or	r24, r25
      d4:	85 bb       	out	0x15, r24	; 21
	lcd_port |= (1<<EN);
      d6:	85 b3       	in	r24, 0x15	; 21
      d8:	88 60       	ori	r24, 0x08	; 8
      da:	85 bb       	out	0x15, r24	; 21
      dc:	35 e0       	ldi	r19, 0x05	; 5
      de:	3a 95       	dec	r19
      e0:	f1 f7       	brne	.-4      	; 0xde <lcd_cmd+0x4c>
      e2:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<EN);
      e4:	85 b3       	in	r24, 0x15	; 21
      e6:	87 7f       	andi	r24, 0xF7	; 247
      e8:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ea:	8f e3       	ldi	r24, 0x3F	; 63
      ec:	9f e1       	ldi	r25, 0x1F	; 31
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <lcd_cmd+0x5c>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_cmd+0x62>
      f4:	00 00       	nop
      f6:	08 95       	ret

000000f8 <lcd_data>:
	
}

void lcd_data(unsigned char data)
{
	lcd_port = (lcd_port & 0x0F)|(data & 0xF0); // upper nibble send
      f8:	95 b3       	in	r25, 0x15	; 21
      fa:	9f 70       	andi	r25, 0x0F	; 15
      fc:	28 2f       	mov	r18, r24
      fe:	20 7f       	andi	r18, 0xF0	; 240
     100:	92 2b       	or	r25, r18
     102:	95 bb       	out	0x15, r25	; 21
	lcd_port |=(1<<RS);	//RS=1 for data pin
     104:	95 b3       	in	r25, 0x15	; 21
     106:	94 60       	ori	r25, 0x04	; 4
     108:	95 bb       	out	0x15, r25	; 21
	lcd_port |=(1<<EN); //pulse enable
     10a:	95 b3       	in	r25, 0x15	; 21
     10c:	98 60       	ori	r25, 0x08	; 8
     10e:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     110:	35 e0       	ldi	r19, 0x05	; 5
     112:	3a 95       	dec	r19
     114:	f1 f7       	brne	.-4      	; 0x112 <lcd_data+0x1a>
     116:	00 00       	nop
	_delay_us(1);
	lcd_port &=~(1<<EN);
     118:	95 b3       	in	r25, 0x15	; 21
     11a:	97 7f       	andi	r25, 0xF7	; 247
     11c:	95 bb       	out	0x15, r25	; 21
     11e:	ef e1       	ldi	r30, 0x1F	; 31
     120:	f3 e0       	ldi	r31, 0x03	; 3
     122:	31 97       	sbiw	r30, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x2a>
     126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_data+0x30>
     128:	00 00       	nop
	_delay_us(200);
	
	lcd_port =(lcd_port & 0x0F)|(data<<4); //sending low nibble
     12a:	25 b3       	in	r18, 0x15	; 21
     12c:	f0 e1       	ldi	r31, 0x10	; 16
     12e:	8f 9f       	mul	r24, r31
     130:	c0 01       	movw	r24, r0
     132:	11 24       	eor	r1, r1
     134:	92 2f       	mov	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
     138:	89 2b       	or	r24, r25
     13a:	85 bb       	out	0x15, r24	; 21
	lcd_port |= (1<<EN);
     13c:	85 b3       	in	r24, 0x15	; 21
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	85 bb       	out	0x15, r24	; 21
     142:	35 e0       	ldi	r19, 0x05	; 5
     144:	3a 95       	dec	r19
     146:	f1 f7       	brne	.-4      	; 0x144 <lcd_data+0x4c>
     148:	00 00       	nop
	_delay_us(1);
	lcd_port &= ~ (1<<EN);
     14a:	85 b3       	in	r24, 0x15	; 21
     14c:	87 7f       	andi	r24, 0xF7	; 247
     14e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     150:	8f e3       	ldi	r24, 0x3F	; 63
     152:	9f e1       	ldi	r25, 0x1F	; 31
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <lcd_data+0x5c>
     158:	00 c0       	rjmp	.+0      	; 0x15a <lcd_data+0x62>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <lcd_str>:
	_delay_ms(2);
}

void lcd_str(char *str)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	ec 01       	movw	r28, r24
	while(*str){
     164:	03 c0       	rjmp	.+6      	; 0x16c <lcd_str+0xe>
		lcd_data(*str++);
     166:	21 96       	adiw	r28, 0x01	; 1
     168:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
	_delay_ms(2);
}

void lcd_str(char *str)
{
	while(*str){
     16c:	88 81       	ld	r24, Y
     16e:	81 11       	cpse	r24, r1
     170:	fa cf       	rjmp	.-12     	; 0x166 <lcd_str+0x8>
		lcd_data(*str++);
	}
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <lcd_rc>:
}


void lcd_rc(char row,char colm)   //selecting row and column
{
	if (row==2)
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	29 f4       	brne	.+10     	; 0x186 <lcd_rc+0xe>
	lcd_cmd(0xC0 |colm);
     17c:	86 2f       	mov	r24, r22
     17e:	80 6c       	ori	r24, 0xC0	; 192
     180:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     184:	08 95       	ret
	else
	lcd_cmd(0x80 |colm);
     186:	86 2f       	mov	r24, r22
     188:	80 68       	ori	r24, 0x80	; 128
     18a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     18e:	08 95       	ret

00000190 <lcd_cstmchar>:
	
}


void lcd_cstmchar(char cgram_rc, char *icon){
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
     198:	8b 01       	movw	r16, r22
	lcd_cmd(0x40 +(cgram_rc*8));
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	08 96       	adiw	r24, 0x08	; 8
     19e:	88 0f       	add	r24, r24
     1a0:	88 0f       	add	r24, r24
     1a2:	88 0f       	add	r24, r24
     1a4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	for (int i=0;i<8;i++){
     1a8:	c0 e0       	ldi	r28, 0x00	; 0
     1aa:	d0 e0       	ldi	r29, 0x00	; 0
     1ac:	07 c0       	rjmp	.+14     	; 0x1bc <lcd_cstmchar+0x2c>
		lcd_data(icon[i]);
     1ae:	f8 01       	movw	r30, r16
     1b0:	ec 0f       	add	r30, r28
     1b2:	fd 1f       	adc	r31, r29
     1b4:	80 81       	ld	r24, Z
     1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}


void lcd_cstmchar(char cgram_rc, char *icon){
	lcd_cmd(0x40 +(cgram_rc*8));
	for (int i=0;i<8;i++){
     1ba:	21 96       	adiw	r28, 0x01	; 1
     1bc:	c8 30       	cpi	r28, 0x08	; 8
     1be:	d1 05       	cpc	r29, r1
     1c0:	b4 f3       	brlt	.-20     	; 0x1ae <lcd_cstmchar+0x1e>
		lcd_data(icon[i]);
	}
	lcd_cmd(0x80);
     1c2:	80 e8       	ldi	r24, 0x80	; 128
     1c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	
}
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	08 95       	ret

000001d2 <LoadingScr>:

/////////////////////////Screen//////////////////////////
void LoadingScr(){
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
     1de:	27 97       	sbiw	r28, 0x07	; 7
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
	lcd_cmd(0x80);
     1ea:	80 e8       	ldi	r24, 0x80	; 128
     1ec:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_str("     Welcome    ");
     1f0:	85 e7       	ldi	r24, 0x75	; 117
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     1f8:	2f e7       	ldi	r18, 0x7F	; 127
     1fa:	84 ed       	ldi	r24, 0xD4	; 212
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	21 50       	subi	r18, 0x01	; 1
     200:	80 40       	sbci	r24, 0x00	; 0
     202:	90 40       	sbci	r25, 0x00	; 0
     204:	e1 f7       	brne	.-8      	; 0x1fe <LoadingScr+0x2c>
     206:	00 c0       	rjmp	.+0      	; 0x208 <LoadingScr+0x36>
     208:	00 00       	nop
	_delay_ms(17);
	
	for (int i=0;i<16;i++){
     20a:	00 e0       	ldi	r16, 0x00	; 0
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	1e c0       	rjmp	.+60     	; 0x24c <LoadingScr+0x7a>
		
		char Loading[7]={0x1f,0x1f,0x1f,0x1f,0x1f,0x1f,0x1f};
     210:	87 e0       	ldi	r24, 0x07	; 7
     212:	e0 e6       	ldi	r30, 0x60	; 96
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	de 01       	movw	r26, r28
     218:	11 96       	adiw	r26, 0x01	; 1
     21a:	01 90       	ld	r0, Z+
     21c:	0d 92       	st	X+, r0
     21e:	8a 95       	dec	r24
     220:	e1 f7       	brne	.-8      	; 0x21a <LoadingScr+0x48>
		lcd_cstmchar(2,Loading);
     222:	be 01       	movw	r22, r28
     224:	6f 5f       	subi	r22, 0xFF	; 255
     226:	7f 4f       	sbci	r23, 0xFF	; 255
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
		lcd_rc(2,i);
     22e:	60 2f       	mov	r22, r16
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_data(2);
     236:	82 e0       	ldi	r24, 0x02	; 2
     238:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
     23c:	8f e9       	ldi	r24, 0x9F	; 159
     23e:	9f e0       	ldi	r25, 0x0F	; 15
     240:	01 97       	sbiw	r24, 0x01	; 1
     242:	f1 f7       	brne	.-4      	; 0x240 <LoadingScr+0x6e>
     244:	00 c0       	rjmp	.+0      	; 0x246 <LoadingScr+0x74>
     246:	00 00       	nop
void LoadingScr(){
	lcd_cmd(0x80);
	lcd_str("     Welcome    ");
	_delay_ms(17);
	
	for (int i=0;i<16;i++){
     248:	0f 5f       	subi	r16, 0xFF	; 255
     24a:	1f 4f       	sbci	r17, 0xFF	; 255
     24c:	00 31       	cpi	r16, 0x10	; 16
     24e:	11 05       	cpc	r17, r1
     250:	fc f2       	brlt	.-66     	; 0x210 <LoadingScr+0x3e>
     252:	8f e9       	ldi	r24, 0x9F	; 159
     254:	9f e0       	ldi	r25, 0x0F	; 15
     256:	01 97       	sbiw	r24, 0x01	; 1
     258:	f1 f7       	brne	.-4      	; 0x256 <LoadingScr+0x84>
     25a:	00 c0       	rjmp	.+0      	; 0x25c <LoadingScr+0x8a>
     25c:	00 00       	nop
		lcd_rc(2,i);
		lcd_data(2);
		_delay_ms(1);
	}
	_delay_ms(1);
	lcd_cmd(0x01);
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
}
     264:	27 96       	adiw	r28, 0x07	; 7
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	f8 94       	cli
     26a:	de bf       	out	0x3e, r29	; 62
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	cd bf       	out	0x3d, r28	; 61
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	1f 91       	pop	r17
     276:	0f 91       	pop	r16
     278:	08 95       	ret

0000027a <lcd_init>:
}


void lcd_init()
{
	lcd_dir = 0xFF;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	84 bb       	out	0x14, r24	; 20
     27e:	8f e5       	ldi	r24, 0x5F	; 95
     280:	9a ee       	ldi	r25, 0xEA	; 234
     282:	01 97       	sbiw	r24, 0x01	; 1
     284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x8>
     286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init+0xe>
     288:	00 00       	nop
	_delay_ms(15);
	
	lcd_cmd(0x32);	//4bit mode initialize
     28a:	82 e3       	ldi	r24, 0x32	; 50
     28c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x28);	//4bit 5*8 matrix
     290:	88 e2       	ldi	r24, 0x28	; 40
     292:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x80);	//1st row
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0xC0);  //2nd row
     29c:	80 ec       	ldi	r24, 0xC0	; 192
     29e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0E);  //enable cursor
     2a2:	8e e0       	ldi	r24, 0x0E	; 14
     2a4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x01);	//clr
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x0C);	//cursor disable
     2ae:	8c e0       	ldi	r24, 0x0C	; 12
     2b0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	LoadingScr();
     2b4:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LoadingScr>
     2b8:	08 95       	ret

000002ba <mainscr>:
	_delay_ms(1);
	lcd_cmd(0x01);
}

void mainscr(int blk,int other)
{
     2ba:	ef 92       	push	r14
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
     2ca:	64 97       	sbiw	r28, 0x14	; 20
     2cc:	0f b6       	in	r0, 0x3f	; 63
     2ce:	f8 94       	cli
     2d0:	de bf       	out	0x3e, r29	; 62
     2d2:	0f be       	out	0x3f, r0	; 63
     2d4:	cd bf       	out	0x3d, r28	; 61
     2d6:	7c 01       	movw	r14, r24
     2d8:	8b 01       	movw	r16, r22
		    char arrowL[7]={0x02,0x06,0x0E,0x1E,0x0E,0x06,0x02};
     2da:	87 e0       	ldi	r24, 0x07	; 7
     2dc:	e7 e6       	ldi	r30, 0x67	; 103
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	de 01       	movw	r26, r28
     2e2:	11 96       	adiw	r26, 0x01	; 1
     2e4:	01 90       	ld	r0, Z+
     2e6:	0d 92       	st	X+, r0
     2e8:	8a 95       	dec	r24
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <mainscr+0x2a>
		    char arrowR[7]={0x08,0x0C,0x0E,0x0F,0x0E,0x0C,0x08};
     2ec:	87 e0       	ldi	r24, 0x07	; 7
     2ee:	ee e6       	ldi	r30, 0x6E	; 110
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	de 01       	movw	r26, r28
     2f4:	18 96       	adiw	r26, 0x08	; 8
     2f6:	01 90       	ld	r0, Z+
     2f8:	0d 92       	st	X+, r0
     2fa:	8a 95       	dec	r24
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <mainscr+0x3c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     2fe:	4a e0       	ldi	r20, 0x0A	; 10
     300:	be 01       	movw	r22, r28
     302:	61 5f       	subi	r22, 0xF1	; 241
     304:	7f 4f       	sbci	r23, 0xFF	; 255
     306:	c7 01       	movw	r24, r14
     308:	0e 94 23 0a 	call	0x1446	; 0x1446 <__itoa_ncheck>
     30c:	4a e0       	ldi	r20, 0x0A	; 10
     30e:	be 01       	movw	r22, r28
     310:	6e 5e       	subi	r22, 0xEE	; 238
     312:	7f 4f       	sbci	r23, 0xFF	; 255
     314:	c8 01       	movw	r24, r16
     316:	0e 94 23 0a 	call	0x1446	; 0x1446 <__itoa_ncheck>
     31a:	8f e3       	ldi	r24, 0x3F	; 63
     31c:	9c e9       	ldi	r25, 0x9C	; 156
     31e:	01 97       	sbiw	r24, 0x01	; 1
     320:	f1 f7       	brne	.-4      	; 0x31e <mainscr+0x64>
     322:	00 c0       	rjmp	.+0      	; 0x324 <mainscr+0x6a>
     324:	00 00       	nop
			char intstr2[3];
		    itoa(blk,intstr1,10);
			itoa(other,intstr2,10);
			
		    _delay_ms(10);
		    lcd_cmd(0x01);
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     32c:	8f e9       	ldi	r24, 0x9F	; 159
     32e:	9f e0       	ldi	r25, 0x0F	; 15
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <mainscr+0x76>
     334:	00 c0       	rjmp	.+0      	; 0x336 <mainscr+0x7c>
     336:	00 00       	nop
		    _delay_ms(1);
		    
		    lcd_cstmchar(0,arrowL);
     338:	be 01       	movw	r22, r28
     33a:	6f 5f       	subi	r22, 0xFF	; 255
     33c:	7f 4f       	sbci	r23, 0xFF	; 255
     33e:	80 e0       	ldi	r24, 0x00	; 0
     340:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
		    lcd_rc(2,0);
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	82 e0       	ldi	r24, 0x02	; 2
     348:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		    lcd_data(0);
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
			
			lcd_rc(0,2);
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
			lcd_str("Black :");
     35a:	86 e8       	ldi	r24, 0x86	; 134
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
			if (blk==1){
     362:	ea 94       	dec	r14
     364:	ef 28       	or	r14, r15
     366:	49 f4       	brne	.+18     	; 0x37a <mainscr+0xc0>
				lcd_rc(0,10);
     368:	6a e0       	ldi	r22, 0x0A	; 10
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("High  ");
     370:	8e e8       	ldi	r24, 0x8E	; 142
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     378:	08 c0       	rjmp	.+16     	; 0x38a <mainscr+0xd0>
			}
			else{
				lcd_rc(0,10);
     37a:	6a e0       	ldi	r22, 0x0A	; 10
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Low");
     382:	8e eb       	ldi	r24, 0xBE	; 190
     384:	91 e0       	ldi	r25, 0x01	; 1
     386:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
			}
			
			
			lcd_rc(2,2);
     38a:	62 e0       	ldi	r22, 0x02	; 2
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
			lcd_str("Other : ");
     392:	85 e9       	ldi	r24, 0x95	; 149
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
			if (other==1){
     39a:	01 30       	cpi	r16, 0x01	; 1
     39c:	11 05       	cpc	r17, r1
     39e:	49 f4       	brne	.+18     	; 0x3b2 <mainscr+0xf8>
				lcd_rc(2,10);
     3a0:	6a e0       	ldi	r22, 0x0A	; 10
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("High  ");
     3a8:	8e e8       	ldi	r24, 0x8E	; 142
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     3b0:	08 c0       	rjmp	.+16     	; 0x3c2 <mainscr+0x108>
			}
			else{
				lcd_rc(2,10);
     3b2:	6a e0       	ldi	r22, 0x0A	; 10
     3b4:	82 e0       	ldi	r24, 0x02	; 2
     3b6:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Low");
     3ba:	8e eb       	ldi	r24, 0xBE	; 190
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
			}
			
			
			lcd_cmd(0x0C);
     3c2:	8c e0       	ldi	r24, 0x0C	; 12
     3c4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		    lcd_cstmchar(1,arrowR);
     3c8:	be 01       	movw	r22, r28
     3ca:	68 5f       	subi	r22, 0xF8	; 248
     3cc:	7f 4f       	sbci	r23, 0xFF	; 255
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
		    lcd_rc(2,15);
     3d4:	6f e0       	ldi	r22, 0x0F	; 15
     3d6:	82 e0       	ldi	r24, 0x02	; 2
     3d8:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		    lcd_data(1);
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     3e2:	64 96       	adiw	r28, 0x14	; 20
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	0f 91       	pop	r16
     3f6:	ff 90       	pop	r15
     3f8:	ef 90       	pop	r14
     3fa:	08 95       	ret

000003fc <fanscr>:


void fanscr(int working)
{
     3fc:	0f 93       	push	r16
     3fe:	1f 93       	push	r17
     400:	cf 93       	push	r28
     402:	df 93       	push	r29
     404:	cd b7       	in	r28, 0x3d	; 61
     406:	de b7       	in	r29, 0x3e	; 62
     408:	62 97       	sbiw	r28, 0x12	; 18
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	8c 01       	movw	r16, r24
	char arrowL[7]={0x02,0x06,0x0E,0x1E,0x0E,0x06,0x02};
     416:	87 e0       	ldi	r24, 0x07	; 7
     418:	e7 e6       	ldi	r30, 0x67	; 103
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	de 01       	movw	r26, r28
     41e:	11 96       	adiw	r26, 0x01	; 1
     420:	01 90       	ld	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	8a 95       	dec	r24
     426:	e1 f7       	brne	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	char arrowR[7]={0x08,0x0C,0x0E,0x0F,0x0E,0x0C,0x08};
     428:	87 e0       	ldi	r24, 0x07	; 7
     42a:	ee e6       	ldi	r30, 0x6E	; 110
     42c:	f0 e0       	ldi	r31, 0x00	; 0
     42e:	de 01       	movw	r26, r28
     430:	18 96       	adiw	r26, 0x08	; 8
     432:	01 90       	ld	r0, Z+
     434:	0d 92       	st	X+, r0
     436:	8a 95       	dec	r24
     438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
     43a:	4a e0       	ldi	r20, 0x0A	; 10
     43c:	be 01       	movw	r22, r28
     43e:	61 5f       	subi	r22, 0xF1	; 241
     440:	7f 4f       	sbci	r23, 0xFF	; 255
     442:	c8 01       	movw	r24, r16
     444:	0e 94 23 0a 	call	0x1446	; 0x1446 <__itoa_ncheck>
     448:	8f e3       	ldi	r24, 0x3F	; 63
     44a:	9c e9       	ldi	r25, 0x9C	; 156
     44c:	01 97       	sbiw	r24, 0x01	; 1
     44e:	f1 f7       	brne	.-4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
     450:	00 c0       	rjmp	.+0      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     452:	00 00       	nop
	char intstr1[4];
	itoa(working,intstr1,10);
	
	_delay_ms(10);
	lcd_cmd(0x01);
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     45a:	8f e9       	ldi	r24, 0x9F	; 159
     45c:	9f e0       	ldi	r25, 0x0F	; 15
     45e:	01 97       	sbiw	r24, 0x01	; 1
     460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     464:	00 00       	nop
	_delay_ms(1);
	
	lcd_cstmchar(0,arrowL);
     466:	be 01       	movw	r22, r28
     468:	6f 5f       	subi	r22, 0xFF	; 255
     46a:	7f 4f       	sbci	r23, 0xFF	; 255
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
	lcd_rc(2,0);
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_data(0);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
	
	lcd_rc(0,3);
     480:	63 e0       	ldi	r22, 0x03	; 3
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("Dry-Fan on/off :");
     488:	8e e9       	ldi	r24, 0x9E	; 158
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	
	if (working==1){
     490:	01 30       	cpi	r16, 0x01	; 1
     492:	11 05       	cpc	r17, r1
     494:	49 f4       	brne	.+18     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
		lcd_rc(2,2);
     496:	62 e0       	ldi	r22, 0x02	; 2
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Activated   ");
     49e:	8f ea       	ldi	r24, 0xAF	; 175
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
	}
	else{
		lcd_rc(2,2);
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	82 e0       	ldi	r24, 0x02	; 2
     4ac:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Deactivated ");
     4b0:	8c eb       	ldi	r24, 0xBC	; 188
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	}
	

	lcd_cmd(0x0C);
     4b8:	8c e0       	ldi	r24, 0x0C	; 12
     4ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cstmchar(1,arrowR);
     4be:	be 01       	movw	r22, r28
     4c0:	68 5f       	subi	r22, 0xF8	; 248
     4c2:	7f 4f       	sbci	r23, 0xFF	; 255
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
	lcd_rc(2,15);
     4ca:	6f e0       	ldi	r22, 0x0F	; 15
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_data(1);
     4d2:	81 e0       	ldi	r24, 0x01	; 1
     4d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     4d8:	62 96       	adiw	r28, 0x12	; 18
     4da:	0f b6       	in	r0, 0x3f	; 63
     4dc:	f8 94       	cli
     4de:	de bf       	out	0x3e, r29	; 62
     4e0:	0f be       	out	0x3f, r0	; 63
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	0f 91       	pop	r16
     4ec:	08 95       	ret

000004ee <info>:


void info(int dis, int color)
{
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	2f 97       	sbiw	r28, 0x0f	; 15
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
     506:	8b 01       	movw	r16, r22
	char arrowL[7]={0x02,0x06,0x0E,0x1E,0x0E,0x06,0x02};
     508:	27 e0       	ldi	r18, 0x07	; 7
     50a:	e7 e6       	ldi	r30, 0x67	; 103
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	de 01       	movw	r26, r28
     510:	11 96       	adiw	r26, 0x01	; 1
     512:	01 90       	ld	r0, Z+
     514:	0d 92       	st	X+, r0
     516:	2a 95       	dec	r18
     518:	e1 f7       	brne	.-8      	; 0x512 <info+0x24>
	char arrowR[7]={0x08,0x0C,0x0E,0x0F,0x0E,0x0C,0x08};
     51a:	27 e0       	ldi	r18, 0x07	; 7
     51c:	ee e6       	ldi	r30, 0x6E	; 110
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	de 01       	movw	r26, r28
     522:	18 96       	adiw	r26, 0x08	; 8
     524:	01 90       	ld	r0, Z+
     526:	0d 92       	st	X+, r0
     528:	2a 95       	dec	r18
     52a:	e1 f7       	brne	.-8      	; 0x524 <info+0x36>
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	be 01       	movw	r22, r28
     530:	61 5f       	subi	r22, 0xF1	; 241
     532:	7f 4f       	sbci	r23, 0xFF	; 255
     534:	0e 94 23 0a 	call	0x1446	; 0x1446 <__itoa_ncheck>
     538:	8f e3       	ldi	r24, 0x3F	; 63
     53a:	9c e9       	ldi	r25, 0x9C	; 156
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	f1 f7       	brne	.-4      	; 0x53c <info+0x4e>
     540:	00 c0       	rjmp	.+0      	; 0x542 <info+0x54>
     542:	00 00       	nop
	char intstr1[1];
	itoa(dis,intstr1,10);
	
	_delay_ms(10);
	lcd_cmd(0x01);
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     54a:	8f e9       	ldi	r24, 0x9F	; 159
     54c:	9f e0       	ldi	r25, 0x0F	; 15
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	f1 f7       	brne	.-4      	; 0x54e <info+0x60>
     552:	00 c0       	rjmp	.+0      	; 0x554 <info+0x66>
     554:	00 00       	nop
	_delay_ms(1);
	
	lcd_cstmchar(0,arrowL);
     556:	be 01       	movw	r22, r28
     558:	6f 5f       	subi	r22, 0xFF	; 255
     55a:	7f 4f       	sbci	r23, 0xFF	; 255
     55c:	80 e0       	ldi	r24, 0x00	; 0
     55e:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
	lcd_rc(2,0);
     562:	60 e0       	ldi	r22, 0x00	; 0
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_data(0);
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
	
	lcd_rc(0,2);
     570:	62 e0       	ldi	r22, 0x02	; 2
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("Distance:");
     578:	89 ec       	ldi	r24, 0xC9	; 201
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	lcd_rc(0,11);
     580:	6b e0       	ldi	r22, 0x0B	; 11
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str(intstr1);
     588:	ce 01       	movw	r24, r28
     58a:	0f 96       	adiw	r24, 0x0f	; 15
     58c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	lcd_rc(0,14);
     590:	6e e0       	ldi	r22, 0x0E	; 14
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("cm");
     598:	83 ed       	ldi	r24, 0xD3	; 211
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	
	lcd_rc(2,2);
     5a0:	62 e0       	ldi	r22, 0x02	; 2
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("Color:");
     5a8:	86 ed       	ldi	r24, 0xD6	; 214
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	if (color==1)
     5b0:	01 30       	cpi	r16, 0x01	; 1
     5b2:	11 05       	cpc	r17, r1
     5b4:	49 f4       	brne	.+18     	; 0x5c8 <info+0xda>
	{
		lcd_rc(2,9);
     5b6:	69 e0       	ldi	r22, 0x09	; 9
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Black");
     5be:	8e e1       	ldi	r24, 0x1E	; 30
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     5c6:	13 c0       	rjmp	.+38     	; 0x5ee <info+0x100>
	}
	else if (color==0)
     5c8:	01 2b       	or	r16, r17
     5ca:	49 f4       	brne	.+18     	; 0x5de <info+0xf0>
	{
		lcd_rc(2,9);
     5cc:	69 e0       	ldi	r22, 0x09	; 9
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Other");
     5d4:	85 e2       	ldi	r24, 0x25	; 37
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     5dc:	08 c0       	rjmp	.+16     	; 0x5ee <info+0x100>
	}
	else{
		lcd_rc(2,9);
     5de:	69 e0       	ldi	r22, 0x09	; 9
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Not");
     5e6:	8d ed       	ldi	r24, 0xDD	; 221
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	}
	
	lcd_cmd(0x0C);
     5ee:	8c e0       	ldi	r24, 0x0C	; 12
     5f0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cstmchar(1,arrowR);
     5f4:	be 01       	movw	r22, r28
     5f6:	68 5f       	subi	r22, 0xF8	; 248
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	0e 94 c8 00 	call	0x190	; 0x190 <lcd_cstmchar>
	lcd_rc(2,15);
     600:	6f e0       	ldi	r22, 0x0F	; 15
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_data(1);
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_data>
}
     60e:	2f 96       	adiw	r28, 0x0f	; 15
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	08 95       	ret

00000624 <updated>:
     624:	8f e3       	ldi	r24, 0x3F	; 63
     626:	9c e9       	ldi	r25, 0x9C	; 156
     628:	01 97       	sbiw	r24, 0x01	; 1
     62a:	f1 f7       	brne	.-4      	; 0x628 <updated+0x4>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <updated+0xa>
     62e:	00 00       	nop

void updated()
{	
	_delay_ms(10);
	lcd_cmd(0x01);
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
     636:	8f e9       	ldi	r24, 0x9F	; 159
     638:	9f e0       	ldi	r25, 0x0F	; 15
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	f1 f7       	brne	.-4      	; 0x63a <updated+0x16>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <updated+0x1c>
     640:	00 00       	nop
	_delay_ms(1);
	
	lcd_rc(0,0);
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("Update");
     64a:	81 ee       	ldi	r24, 0xE1	; 225
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	lcd_rc(2,0);
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	82 e0       	ldi	r24, 0x02	; 2
     656:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
	lcd_str("Successfully");
     65a:	88 ee       	ldi	r24, 0xE8	; 232
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     662:	08 95       	ret

00000664 <HCSR04Init>:
char numberString[4];

void HCSR04Init(uint8_t trig)
{
	// we're setting the trigger pin as output as it will generate ultrasonic sound wave
	US_DDR|=(1<<trig);
     664:	91 b3       	in	r25, 0x11	; 17
     666:	21 e0       	ldi	r18, 0x01	; 1
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	02 c0       	rjmp	.+4      	; 0x670 <HCSR04Init+0xc>
     66c:	22 0f       	add	r18, r18
     66e:	33 1f       	adc	r19, r19
     670:	8a 95       	dec	r24
     672:	e2 f7       	brpl	.-8      	; 0x66c <HCSR04Init+0x8>
     674:	29 2b       	or	r18, r25
     676:	21 bb       	out	0x11, r18	; 17
     678:	08 95       	ret

0000067a <HCSR04Trigger>:

void HCSR04Trigger(uint8_t trig)
{   // this function will generate ultrasonic sound wave for 15 microseconds
	//Send a 10uS pulse on trigger line
	
	US_PORT|=(1<<trig);	//high
     67a:	42 b3       	in	r20, 0x12	; 18
     67c:	21 e0       	ldi	r18, 0x01	; 1
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	b9 01       	movw	r22, r18
     682:	02 c0       	rjmp	.+4      	; 0x688 <HCSR04Trigger+0xe>
     684:	66 0f       	add	r22, r22
     686:	77 1f       	adc	r23, r23
     688:	8a 95       	dec	r24
     68a:	e2 f7       	brpl	.-8      	; 0x684 <HCSR04Trigger+0xa>
     68c:	cb 01       	movw	r24, r22
     68e:	46 2b       	or	r20, r22
     690:	42 bb       	out	0x12, r20	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     692:	70 e5       	ldi	r23, 0x50	; 80
     694:	7a 95       	dec	r23
     696:	f1 f7       	brne	.-4      	; 0x694 <HCSR04Trigger+0x1a>
	_delay_us(15);				//wait 15uS
	US_PORT&=~(1<<trig);	//low
     698:	92 b3       	in	r25, 0x12	; 18
     69a:	80 95       	com	r24
     69c:	89 23       	and	r24, r25
     69e:	82 bb       	out	0x12, r24	; 18
     6a0:	08 95       	ret

000006a2 <GetPulseWidth>:
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     6a2:	40 e0       	ldi	r20, 0x00	; 0
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	ba 01       	movw	r22, r20
     6a8:	0e c0       	rjmp	.+28     	; 0x6c6 <GetPulseWidth+0x24>
	{
		if(!(US_PIN & (1<<pos)))
     6aa:	20 b3       	in	r18, 0x10	; 16
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	08 2e       	mov	r0, r24
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <GetPulseWidth+0x14>
     6b2:	35 95       	asr	r19
     6b4:	27 95       	ror	r18
     6b6:	0a 94       	dec	r0
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <GetPulseWidth+0x10>
     6ba:	20 fd       	sbrc	r18, 0
     6bc:	0b c0       	rjmp	.+22     	; 0x6d4 <GetPulseWidth+0x32>
	
	uint32_t i,result;

	// Section - 1: the following lines of code before the section - 2 is checking if the ultrasonic is working or not
	// it check the echo pin for a certain amount of time. If there is no signal it means the sensor is not working or not connect properly
	for(i=0;i<600000;i++)
     6be:	4f 5f       	subi	r20, 0xFF	; 255
     6c0:	5f 4f       	sbci	r21, 0xFF	; 255
     6c2:	6f 4f       	sbci	r22, 0xFF	; 255
     6c4:	7f 4f       	sbci	r23, 0xFF	; 255
     6c6:	40 3c       	cpi	r20, 0xC0	; 192
     6c8:	27 e2       	ldi	r18, 0x27	; 39
     6ca:	52 07       	cpc	r21, r18
     6cc:	29 e0       	ldi	r18, 0x09	; 9
     6ce:	62 07       	cpc	r22, r18
     6d0:	71 05       	cpc	r23, r1
     6d2:	58 f3       	brcs	.-42     	; 0x6aa <GetPulseWidth+0x8>
		continue;	//Line is still low, so wait
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
     6d4:	40 3c       	cpi	r20, 0xC0	; 192
     6d6:	57 42       	sbci	r21, 0x27	; 39
     6d8:	69 40       	sbci	r22, 0x09	; 9
     6da:	71 05       	cpc	r23, r1
     6dc:	c1 f1       	breq	.+112    	; 0x74e <GetPulseWidth+0xac>
	
	//High Edge Found
	
	// Section -2 : This section is all about preparing the timer for counting the time of the pulse. Timers in microcontrllers is used for timimg operation
	//Setup Timer1
	TCCR1A=0X00;
     6de:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x00;			// This line start the counter to start counting time
     6e4:	1d bc       	out	0x2d, r1	; 45
     6e6:	1c bc       	out	0x2c, r1	; 44

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     6e8:	40 e0       	ldi	r20, 0x00	; 0
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	ba 01       	movw	r22, r20
     6ee:	13 c0       	rjmp	.+38     	; 0x716 <GetPulseWidth+0x74>
	{
		if(US_PIN & (1<<pos))
     6f0:	20 b3       	in	r18, 0x10	; 16
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	08 2e       	mov	r0, r24
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <GetPulseWidth+0x5a>
     6f8:	35 95       	asr	r19
     6fa:	27 95       	ror	r18
     6fc:	0a 94       	dec	r0
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <GetPulseWidth+0x56>
     700:	20 ff       	sbrs	r18, 0
     702:	10 c0       	rjmp	.+32     	; 0x724 <GetPulseWidth+0x82>
		{
			if(TCNT1 > 60000) break; else continue;   // if the TCNT1 value gets higher than 60000 it means there is not object in the range of the sensor
     704:	2c b5       	in	r18, 0x2c	; 44
     706:	3d b5       	in	r19, 0x2d	; 45
     708:	21 36       	cpi	r18, 0x61	; 97
     70a:	3a 4e       	sbci	r19, 0xEA	; 234
     70c:	58 f4       	brcc	.+22     	; 0x724 <GetPulseWidth+0x82>
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);	// This line sets the resolution of the timer. Maximum of how much value it should count.
	TCNT1=0x00;			// This line start the counter to start counting time

	// Section -3 : This section checks weather the there is any object or not
	for(i=0;i<600000;i++)                // the 600000 value is used randomly to denote a very small amount of time, almost 40 miliseconds
     70e:	4f 5f       	subi	r20, 0xFF	; 255
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	6f 4f       	sbci	r22, 0xFF	; 255
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	40 3c       	cpi	r20, 0xC0	; 192
     718:	27 e2       	ldi	r18, 0x27	; 39
     71a:	52 07       	cpc	r21, r18
     71c:	29 e0       	ldi	r18, 0x09	; 9
     71e:	62 07       	cpc	r22, r18
     720:	71 05       	cpc	r23, r1
     722:	30 f3       	brcs	.-52     	; 0x6f0 <GetPulseWidth+0x4e>
		}
		else
		break;
	}

	if(i==600000)
     724:	40 3c       	cpi	r20, 0xC0	; 192
     726:	57 42       	sbci	r21, 0x27	; 39
     728:	69 40       	sbci	r22, 0x09	; 9
     72a:	71 05       	cpc	r23, r1
     72c:	99 f0       	breq	.+38     	; 0x754 <GetPulseWidth+0xb2>
	return US_NO_OBSTACLE;	//Indicates time out

	//Falling edge found

	result=TCNT1;          // microcontroller stores the the value of the counted pulse time in the TCNT1 register. So, we're returning this value to the
     72e:	8c b5       	in	r24, 0x2c	; 44
     730:	9d b5       	in	r25, 0x2d	; 45
     732:	a0 e0       	ldi	r26, 0x00	; 0
     734:	b0 e0       	ldi	r27, 0x00	; 0
	// main function for utilizing it later

	//Stop Timer
	TCCR1B=0x00;
     736:	1e bc       	out	0x2e, r1	; 46

	if(result > 60000)
     738:	81 36       	cpi	r24, 0x61	; 97
     73a:	2a ee       	ldi	r18, 0xEA	; 234
     73c:	92 07       	cpc	r25, r18
     73e:	a1 05       	cpc	r26, r1
     740:	b1 05       	cpc	r27, r1
     742:	58 f4       	brcc	.+22     	; 0x75a <GetPulseWidth+0xb8>
	return US_NO_OBSTACLE;	//No obstacle
	else
	return (result>>1);
     744:	b6 95       	lsr	r27
     746:	a7 95       	ror	r26
     748:	97 95       	ror	r25
     74a:	87 95       	ror	r24
     74c:	08 95       	ret
		else
		break;		//High edge detected, so break.
	}

	if(i==600000)
	return US_ERROR;	//Indicates time out
     74e:	8f ef       	ldi	r24, 0xFF	; 255
     750:	9f ef       	ldi	r25, 0xFF	; 255
     752:	08 95       	ret
		else
		break;
	}

	if(i==600000)
	return US_NO_OBSTACLE;	//Indicates time out
     754:	8e ef       	ldi	r24, 0xFE	; 254
     756:	9f ef       	ldi	r25, 0xFF	; 255
     758:	08 95       	ret

	//Stop Timer
	TCCR1B=0x00;

	if(result > 60000)
	return US_NO_OBSTACLE;	//No obstacle
     75a:	8e ef       	ldi	r24, 0xFE	; 254
     75c:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     75e:	08 95       	ret

00000760 <maxShoe>:


int maxShoe(){
     760:	0f 93       	push	r16
     762:	1f 93       	push	r17
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     768:	2f ef       	ldi	r18, 0xFF	; 255
     76a:	81 ee       	ldi	r24, 0xE1	; 225
     76c:	94 e0       	ldi	r25, 0x04	; 4
     76e:	21 50       	subi	r18, 0x01	; 1
     770:	80 40       	sbci	r24, 0x00	; 0
     772:	90 40       	sbci	r25, 0x00	; 0
     774:	e1 f7       	brne	.-8      	; 0x76e <maxShoe+0xe>
     776:	00 c0       	rjmp	.+0      	; 0x778 <maxShoe+0x18>
     778:	00 00       	nop
	uint16_t d1, d2;
	//int distance;
	_delay_ms(100);
	
	
	HCSR04Init(PD0);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 32 03 	call	0x664	; 0x664 <HCSR04Init>
	HCSR04Trigger(PD0);
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 3d 03 	call	0x67a	; 0x67a <HCSR04Trigger>
	d1 = GetPulseWidth(PD1);
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	0e 94 51 03 	call	0x6a2	; 0x6a2 <GetPulseWidth>
     78c:	8c 01       	movw	r16, r24
	
	HCSR04Init(PD2);
     78e:	82 e0       	ldi	r24, 0x02	; 2
     790:	0e 94 32 03 	call	0x664	; 0x664 <HCSR04Init>
	HCSR04Trigger(PD2);
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 3d 03 	call	0x67a	; 0x67a <HCSR04Trigger>
	d2 = GetPulseWidth(PD3);
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <GetPulseWidth>
     7a0:	ec 01       	movw	r28, r24

	if(d1 == US_ERROR || d2 == US_ERROR)
     7a2:	0f 3f       	cpi	r16, 0xFF	; 255
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	12 07       	cpc	r17, r18
     7a8:	21 f0       	breq	.+8      	; 0x7b2 <maxShoe+0x52>
     7aa:	cf 3f       	cpi	r28, 0xFF	; 255
     7ac:	8f ef       	ldi	r24, 0xFF	; 255
     7ae:	d8 07       	cpc	r29, r24
     7b0:	41 f4       	brne	.+16     	; 0x7c2 <maxShoe+0x62>
	{
		lcd_cmd(0x80);
     7b2:	80 e8       	ldi	r24, 0x80	; 128
     7b4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_str("!");
     7b8:	86 ea       	ldi	r24, 0xA6	; 166
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     7c0:	41 c0       	rjmp	.+130    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	}
	else
	{
		if (d1 == d2){
     7c2:	0c 17       	cp	r16, r28
     7c4:	1d 07       	cpc	r17, r29
     7c6:	01 f4       	brne	.+0      	; 0x7c8 <maxShoe+0x68>
			distance=d1;
			distance=distance*0.034/2.0 + 1;
		}
		if (d1>d2){
     7c8:	c0 17       	cp	r28, r16
     7ca:	d1 07       	cpc	r29, r17
     7cc:	f0 f4       	brcc	.+60     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
			d1=d1*0.034/2.0 + 1;
     7ce:	b8 01       	movw	r22, r16
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     7d8:	26 e9       	ldi	r18, 0x96	; 150
     7da:	33 e4       	ldi	r19, 0x43	; 67
     7dc:	4b e0       	ldi	r20, 0x0B	; 11
     7de:	5d e3       	ldi	r21, 0x3D	; 61
     7e0:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	5f e3       	ldi	r21, 0x3F	; 63
     7ec:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	40 e8       	ldi	r20, 0x80	; 128
     7f6:	5f e3       	ldi	r21, 0x3F	; 63
     7f8:	0e 94 86 08 	call	0x110c	; 0x110c <__addsf3>
     7fc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fixunssfsi>
			distance=d1;
     800:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <distance+0x1>
     804:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <distance>
     808:	1d c0       	rjmp	.+58     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
			}else{
			d2=d2*0.034/2.0 + 1;
     80a:	be 01       	movw	r22, r28
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     814:	26 e9       	ldi	r18, 0x96	; 150
     816:	33 e4       	ldi	r19, 0x43	; 67
     818:	4b e0       	ldi	r20, 0x0B	; 11
     81a:	5d e3       	ldi	r21, 0x3D	; 61
     81c:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	40 e0       	ldi	r20, 0x00	; 0
     826:	5f e3       	ldi	r21, 0x3F	; 63
     828:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
     82c:	20 e0       	ldi	r18, 0x00	; 0
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e8       	ldi	r20, 0x80	; 128
     832:	5f e3       	ldi	r21, 0x3F	; 63
     834:	0e 94 86 08 	call	0x110c	; 0x110c <__addsf3>
     838:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fixunssfsi>
			distance=d2;
     83c:	70 93 e2 01 	sts	0x01E2, r23	; 0x8001e2 <distance+0x1>
     840:	60 93 e1 01 	sts	0x01E1, r22	; 0x8001e1 <distance>
		}
	}
	return distance;
}
     844:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <distance>
     848:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <distance+0x1>
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <speedControl>:
unsigned char cnt=0;

void speedControl(unsigned int speed){
	float _dutyCycle;
	unsigned int dutyCycle;
	_dutyCycle=speed*(100.0/1024);//speed the clock cycle
     856:	bc 01       	movw	r22, r24
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	0e 94 28 09 	call	0x1250	; 0x1250 <__floatunsisf>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	48 ec       	ldi	r20, 0xC8	; 200
     866:	5d e3       	ldi	r21, 0x3D	; 61
     868:	0e 94 b6 09 	call	0x136c	; 0x136c <__mulsf3>
	dutyCycle=10+(int)_dutyCycle;
     86c:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <__fixsfsi>
     870:	66 5f       	subi	r22, 0xF6	; 246
     872:	7f 4f       	sbci	r23, 0xFF	; 255
	if(cnt<dutyCycle)	PORTC|=(1<<0);
     874:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	86 17       	cp	r24, r22
     87c:	97 07       	cpc	r25, r23
     87e:	18 f4       	brcc	.+6      	; 0x886 <__stack+0x27>
     880:	85 b3       	in	r24, 0x15	; 21
     882:	81 60       	ori	r24, 0x01	; 1
     884:	85 bb       	out	0x15, r24	; 21
	if(cnt>=dutyCycle)	PORTC&=~(1<<0);
     886:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	86 17       	cp	r24, r22
     88e:	97 07       	cpc	r25, r23
     890:	18 f0       	brcs	.+6      	; 0x898 <__stack+0x39>
     892:	85 b3       	in	r24, 0x15	; 21
     894:	8e 7f       	andi	r24, 0xFE	; 254
     896:	85 bb       	out	0x15, r24	; 21
	if(cnt>=100)	cnt=0;
     898:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     89c:	84 36       	cpi	r24, 0x64	; 100
     89e:	10 f0       	brcs	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <__data_end>
     8a4:	08 95       	ret

000008a6 <dryfan>:

void dryfan(void){
	
	unsigned int adcResult;
	//PortD as output
	PORTC|=(1<<0);
     8a6:	85 b3       	in	r24, 0x15	; 21
     8a8:	81 60       	ori	r24, 0x01	; 1
     8aa:	85 bb       	out	0x15, r24	; 21
	//PortA as input
	//DDRA=1;
	PORTA&=~(1<<1);
     8ac:	8b b3       	in	r24, 0x1b	; 27
     8ae:	8d 7f       	andi	r24, 0xFD	; 253
     8b0:	8b bb       	out	0x1b, r24	; 27
	//Set timer 0 prescaler to 1:8
	TCCR0=0x02;
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	83 bf       	out	0x33, r24	; 51
	//Clear timer 0 overflow flag
	TIFR=0x01;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	88 bf       	out	0x38, r24	; 56
	//Enable timer 0 interrupt
	TIMSK=0x01;
     8ba:	89 bf       	out	0x39, r24	; 57
	//Enable timer 0 interrupt
	TIMSK=0x01;
     8bc:	89 bf       	out	0x39, r24	; 57
	//Set global interrupt
	sei();
     8be:	78 94       	sei
	//Turn on the ADC module
	ADCSRA|=(1<<ADEN);
     8c0:	86 b1       	in	r24, 0x06	; 6
     8c2:	80 68       	ori	r24, 0x80	; 128
     8c4:	86 b9       	out	0x06, r24	; 6
	//Select ADC7 channel
	ADMUX|=0x01;
     8c6:	87 b1       	in	r24, 0x07	; 7
     8c8:	81 60       	ori	r24, 0x01	; 1
     8ca:	87 b9       	out	0x07, r24	; 7

		//Start the conversion
		ADCSRA|=(1<<ADSC);
     8cc:	86 b1       	in	r24, 0x06	; 6
     8ce:	80 64       	ori	r24, 0x40	; 64
     8d0:	86 b9       	out	0x06, r24	; 6
		//Wait for the completion
		while((ADCSRA&(1<<ADSC))==1);
     8d2:	86 b1       	in	r24, 0x06	; 6
		//Read the result
		adcResult=ADCL+(ADCH<<8);
     8d4:	24 b1       	in	r18, 0x04	; 4
     8d6:	85 b1       	in	r24, 0x05	; 5
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	98 2f       	mov	r25, r24
     8dc:	88 27       	eor	r24, r24
		speedControl(adcResult);
     8de:	82 0f       	add	r24, r18
     8e0:	91 1d       	adc	r25, r1
     8e2:	0e 94 2b 04 	call	0x856	; 0x856 <speedControl>
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	8b e7       	ldi	r24, 0x7B	; 123
     8ea:	92 e9       	ldi	r25, 0x92	; 146
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	80 40       	sbci	r24, 0x00	; 0
     8f0:	90 40       	sbci	r25, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <dryfan+0x46>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <dryfan+0x50>
     8f6:	00 00       	nop
		_delay_ms(3000); //need -> time up
		//PORTC=0x00;
		PORTC&=~(1<<0);
     8f8:	85 b3       	in	r24, 0x15	; 21
     8fa:	8e 7f       	andi	r24, 0xFE	; 254
     8fc:	85 bb       	out	0x15, r24	; 21
     8fe:	08 95       	ret

00000900 <__vector_11>:
}

ISR(TIMER0_OVF_vect){
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	8f 93       	push	r24
	//Load TCNT0 with -5 to make a 10 uS interrupt time
	TCNT0=-5;
     90c:	8b ef       	ldi	r24, 0xFB	; 251
     90e:	82 bf       	out	0x32, r24	; 50
	cnt+=1;
     910:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <__data_end>
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <__data_end>
	TIFR=0x01;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	88 bf       	out	0x38, r24	; 56
}
     91e:	8f 91       	pop	r24
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <black_brush>:
#define BRUSH_MOTOR1_H_

void black_brush()
{
	//when black color detected
	DDRB |= (1<<PB3);  //port pb3 output
     92a:	87 b3       	in	r24, 0x17	; 23
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PB4);  //port pb4 output
     930:	87 b3       	in	r24, 0x17	; 23
     932:	80 61       	ori	r24, 0x10	; 16
     934:	87 bb       	out	0x17, r24	; 23
	
	int count=0;
     936:	20 e0       	ldi	r18, 0x00	; 0
     938:	30 e0       	ldi	r19, 0x00	; 0
	while (count<10)
     93a:	20 c0       	rjmp	.+64     	; 0x97c <black_brush+0x52>
	{
		unsigned int d=5000;
		//clock wise
		PORTB|=(1<<3);		//motor 1 on
     93c:	88 b3       	in	r24, 0x18	; 24
     93e:	88 60       	ori	r24, 0x08	; 8
     940:	88 bb       	out	0x18, r24	; 24
     942:	4f ef       	ldi	r20, 0xFF	; 255
     944:	83 e2       	ldi	r24, 0x23	; 35
     946:	94 ef       	ldi	r25, 0xF4	; 244
     948:	41 50       	subi	r20, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <black_brush+0x1e>
     950:	00 c0       	rjmp	.+0      	; 0x952 <black_brush+0x28>
     952:	00 00       	nop
		_delay_ms(d);
		PORTB&=~(1<<3);		//motor 1 off
     954:	88 b3       	in	r24, 0x18	; 24
     956:	87 7f       	andi	r24, 0xF7	; 247
     958:	88 bb       	out	0x18, r24	; 24
		
		//anti clock
		PORTB|=(1<<4);		//motor 1 on
     95a:	88 b3       	in	r24, 0x18	; 24
     95c:	80 61       	ori	r24, 0x10	; 16
     95e:	88 bb       	out	0x18, r24	; 24
     960:	4f ef       	ldi	r20, 0xFF	; 255
     962:	83 e2       	ldi	r24, 0x23	; 35
     964:	94 ef       	ldi	r25, 0xF4	; 244
     966:	41 50       	subi	r20, 0x01	; 1
     968:	80 40       	sbci	r24, 0x00	; 0
     96a:	90 40       	sbci	r25, 0x00	; 0
     96c:	e1 f7       	brne	.-8      	; 0x966 <black_brush+0x3c>
     96e:	00 c0       	rjmp	.+0      	; 0x970 <black_brush+0x46>
     970:	00 00       	nop
		_delay_ms(d);
		PORTB&=~(1<<4);		//motor 1 off
     972:	88 b3       	in	r24, 0x18	; 24
     974:	8f 7e       	andi	r24, 0xEF	; 239
     976:	88 bb       	out	0x18, r24	; 24
		
		count+=1;
     978:	2f 5f       	subi	r18, 0xFF	; 255
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
	//when black color detected
	DDRB |= (1<<PB3);  //port pb3 output
	DDRB |= (1<<PB4);  //port pb4 output
	
	int count=0;
	while (count<10)
     97c:	2a 30       	cpi	r18, 0x0A	; 10
     97e:	31 05       	cpc	r19, r1
     980:	ec f2       	brlt	.-70     	; 0x93c <black_brush+0x12>
		_delay_ms(d);
		PORTB&=~(1<<4);		//motor 1 off
		
		count+=1;
	}
}
     982:	08 95       	ret

00000984 <other_brush>:

void other_brush()
{
	DDRB |= (1<<PB5);  //port pb5 output
     984:	87 b3       	in	r24, 0x17	; 23
     986:	80 62       	ori	r24, 0x20	; 32
     988:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PB6);  //port pb6  output
     98a:	87 b3       	in	r24, 0x17	; 23
     98c:	80 64       	ori	r24, 0x40	; 64
     98e:	87 bb       	out	0x17, r24	; 23
	int count=0;
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	90 e0       	ldi	r25, 0x00	; 0
	while (count<2){
     994:	1f c0       	rjmp	.+62     	; 0x9d4 <other_brush+0x50>
		unsigned int d=2000;
		//clock wise
		PORTB|=(1<<5);		//motor 1 on
     996:	28 b3       	in	r18, 0x18	; 24
     998:	20 62       	ori	r18, 0x20	; 32
     99a:	28 bb       	out	0x18, r18	; 24
     99c:	2f ef       	ldi	r18, 0xFF	; 255
     99e:	37 ea       	ldi	r19, 0xA7	; 167
     9a0:	41 e6       	ldi	r20, 0x61	; 97
     9a2:	21 50       	subi	r18, 0x01	; 1
     9a4:	30 40       	sbci	r19, 0x00	; 0
     9a6:	40 40       	sbci	r20, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <other_brush+0x1e>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <other_brush+0x28>
     9ac:	00 00       	nop
		_delay_ms(d);
		PORTB&=~(1<<5);		//motor 1 off
     9ae:	28 b3       	in	r18, 0x18	; 24
     9b0:	2f 7d       	andi	r18, 0xDF	; 223
     9b2:	28 bb       	out	0x18, r18	; 24
		
		//anti clock
		PORTB|=(1<<6);		//motor 1 on
     9b4:	28 b3       	in	r18, 0x18	; 24
     9b6:	20 64       	ori	r18, 0x40	; 64
     9b8:	28 bb       	out	0x18, r18	; 24
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	37 ea       	ldi	r19, 0xA7	; 167
     9be:	41 e6       	ldi	r20, 0x61	; 97
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	30 40       	sbci	r19, 0x00	; 0
     9c4:	40 40       	sbci	r20, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <other_brush+0x3c>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <other_brush+0x46>
     9ca:	00 00       	nop
		_delay_ms(d);
		PORTB&=~(1<<6);		//motor 1 off
     9cc:	28 b3       	in	r18, 0x18	; 24
     9ce:	2f 7b       	andi	r18, 0xBF	; 191
     9d0:	28 bb       	out	0x18, r18	; 24
		
		count+=1;
     9d2:	01 96       	adiw	r24, 0x01	; 1
void other_brush()
{
	DDRB |= (1<<PB5);  //port pb5 output
	DDRB |= (1<<PB6);  //port pb6  output
	int count=0;
	while (count<2){
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	91 05       	cpc	r25, r1
     9d8:	f4 f2       	brlt	.-68     	; 0x996 <other_brush+0x12>
		_delay_ms(d);
		PORTB&=~(1<<6);		//motor 1 off
		
		count+=1;
	}
}
     9da:	08 95       	ret

000009dc <black_polish_level>:
}


int black_polish_level(){
	int black;
	DDRB = DDRB &(~(1<<2))&(~(1<<1));
     9dc:	87 b3       	in	r24, 0x17	; 23
     9de:	89 7f       	andi	r24, 0xF9	; 249
     9e0:	87 bb       	out	0x17, r24	; 23
	
	if((PINB & (1<<1))!=0){
     9e2:	b1 99       	sbic	0x16, 1	; 22
     9e4:	1d c0       	rjmp	.+58     	; 0xa20 <black_polish_level+0x44>
		black=1;
	}
	else{  
		lcd_cmd(0x01);
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_cmd(0x80);	//1st row
     9ec:	80 e8       	ldi	r24, 0x80	; 128
     9ee:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_str("Polish level low");
     9f2:	85 ef       	ldi	r24, 0xF5	; 245
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
		lcd_cmd(0xC0);
     9fa:	80 ec       	ldi	r24, 0xC0	; 192
     9fc:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_str("Black");
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     a08:	2f ef       	ldi	r18, 0xFF	; 255
     a0a:	85 ea       	ldi	r24, 0xA5	; 165
     a0c:	9e e0       	ldi	r25, 0x0E	; 14
     a0e:	21 50       	subi	r18, 0x01	; 1
     a10:	80 40       	sbci	r24, 0x00	; 0
     a12:	90 40       	sbci	r25, 0x00	; 0
     a14:	e1 f7       	brne	.-8      	; 0xa0e <black_polish_level+0x32>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <black_polish_level+0x3c>
     a18:	00 00       	nop
		_delay_ms(300);
		black=0;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	08 95       	ret
int black_polish_level(){
	int black;
	DDRB = DDRB &(~(1<<2))&(~(1<<1));
	
	if((PINB & (1<<1))!=0){
		black=1;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
		lcd_str("Black");
		_delay_ms(300);
		black=0;
	}
	return black;
}
     a24:	08 95       	ret

00000a26 <other_polish_level>:

int other_polish_level(){
	int other;
	DDRB = DDRB &(~(1<<2))&(~(1<<1));
     a26:	87 b3       	in	r24, 0x17	; 23
     a28:	89 7f       	andi	r24, 0xF9	; 249
     a2a:	87 bb       	out	0x17, r24	; 23
	
	if((PINB & (1<<2))!=0){
     a2c:	b2 99       	sbic	0x16, 2	; 22
     a2e:	1d c0       	rjmp	.+58     	; 0xa6a <other_polish_level+0x44>
		other=1;
	}
	else{
		lcd_cmd(0x01);
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_cmd(0x80);	//1st row
     a36:	80 e8       	ldi	r24, 0x80	; 128
     a38:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_str("Polish level low");
     a3c:	85 ef       	ldi	r24, 0xF5	; 245
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
		lcd_cmd(0xC0);
     a44:	80 ec       	ldi	r24, 0xC0	; 192
     a46:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_str("Other");
     a4a:	85 e2       	ldi	r24, 0x25	; 37
     a4c:	91 e0       	ldi	r25, 0x01	; 1
     a4e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     a52:	2f ef       	ldi	r18, 0xFF	; 255
     a54:	85 ea       	ldi	r24, 0xA5	; 165
     a56:	9e e0       	ldi	r25, 0x0E	; 14
     a58:	21 50       	subi	r18, 0x01	; 1
     a5a:	80 40       	sbci	r24, 0x00	; 0
     a5c:	90 40       	sbci	r25, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <other_polish_level+0x32>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <other_polish_level+0x3c>
     a62:	00 00       	nop
		_delay_ms(300);
		other=0;
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	08 95       	ret
int other_polish_level(){
	int other;
	DDRB = DDRB &(~(1<<2))&(~(1<<1));
	
	if((PINB & (1<<2))!=0){
		other=1;
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	90 e0       	ldi	r25, 0x00	; 0
		lcd_str("Other");
		_delay_ms(300);
		other=0;
	}
	return other;
}
     a6e:	08 95       	ret

00000a70 <color_Detection>:

//shoe color detection
int color_Detection()
{
     a70:	cf 93       	push	r28
     a72:	df 93       	push	r29
	DDRB = DDRB &(~(1<<0));
     a74:	87 b3       	in	r24, 0x17	; 23
     a76:	8e 7f       	andi	r24, 0xFE	; 254
     a78:	87 bb       	out	0x17, r24	; 23
	int black_shoes=0;
	int color_select=0;
	int pin_value=PINB & (1<<0);
     a7a:	86 b3       	in	r24, 0x16	; 22
	
	if (pin_value==1)
     a7c:	28 2f       	mov	r18, r24
     a7e:	21 70       	andi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	80 fd       	sbrc	r24, 0
     a84:	03 c0       	rjmp	.+6      	; 0xa8c <color_Detection+0x1c>

//shoe color detection
int color_Detection()
{
	DDRB = DDRB &(~(1<<0));
	int black_shoes=0;
     a86:	c0 e0       	ldi	r28, 0x00	; 0
     a88:	d0 e0       	ldi	r29, 0x00	; 0
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <color_Detection+0x20>
	int color_select=0;
	int pin_value=PINB & (1<<0);
	
	if (pin_value==1)
	{
		black_shoes=1;
     a8c:	c1 e0       	ldi	r28, 0x01	; 1
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
	}
	if (pin_value!=1)
     a90:	21 30       	cpi	r18, 0x01	; 1
     a92:	31 05       	cpc	r19, r1
     a94:	09 f4       	brne	.+2      	; 0xa98 <color_Detection+0x28>
     a96:	40 c0       	rjmp	.+128    	; 0xb18 <color_Detection+0xa8>
	{		
		lcd_cmd(0x01);  //clear display
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
		lcd_rc(1,1);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("Choose correct");
     aa6:	86 e0       	ldi	r24, 0x06	; 6
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
		lcd_rc(2,1);
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
		lcd_str("colour:");
     ab6:	85 e1       	ldi	r24, 0x15	; 21
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>

		while (color_select==0)
     abe:	28 c0       	rjmp	.+80     	; 0xb10 <color_Detection+0xa0>
		{
			if (PINA ==(1<<6))
			{
				black_shoes=1;
				lcd_rc(2,9);
     ac0:	69 e0       	ldi	r22, 0x09	; 9
     ac2:	82 e0       	ldi	r24, 0x02	; 2
     ac4:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str(" Black");
     ac8:	8d e1       	ldi	r24, 0x1D	; 29
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>

		while (color_select==0)
		{
			if (PINA ==(1<<6))
			{
				black_shoes=1;
     ad0:	c1 e0       	ldi	r28, 0x01	; 1
     ad2:	d0 e0       	ldi	r29, 0x00	; 0
     ad4:	1d c0       	rjmp	.+58     	; 0xb10 <color_Detection+0xa0>
				lcd_rc(2,9);
				lcd_str(" Black");
				color_select=1;
			}
			else if (PINA ==(1<<7))
     ad6:	89 b3       	in	r24, 0x19	; 25
     ad8:	80 38       	cpi	r24, 0x80	; 128
     ada:	59 f4       	brne	.+22     	; 0xaf2 <color_Detection+0x82>
			{
				black_shoes=0;
				lcd_rc(2,9);
     adc:	69 e0       	ldi	r22, 0x09	; 9
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str(" Other");
     ae4:	84 e2       	ldi	r24, 0x24	; 36
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
				lcd_str(" Black");
				color_select=1;
			}
			else if (PINA ==(1<<7))
			{
				black_shoes=0;
     aec:	c0 e0       	ldi	r28, 0x00	; 0
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	0f c0       	rjmp	.+30     	; 0xb10 <color_Detection+0xa0>
				lcd_rc(2,9);
				lcd_str(" Other");
				color_select=1;
			}
			else if (PINA==(1<<4))   //save button
     af2:	89 b3       	in	r24, 0x19	; 25
     af4:	80 31       	cpi	r24, 0x10	; 16
     af6:	61 f4       	brne	.+24     	; 0xb10 <color_Detection+0xa0>
			{
				color_select=1;
				updated();
     af8:	0e 94 12 03 	call	0x624	; 0x624 <updated>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	81 ee       	ldi	r24, 0xE1	; 225
     b00:	94 e0       	ldi	r25, 0x04	; 4
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <color_Detection+0x92>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <color_Detection+0x9c>
     b0c:	00 00       	nop
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <color_Detection+0xa8>
		lcd_rc(2,1);
		lcd_str("colour:");

		while (color_select==0)
		{
			if (PINA ==(1<<6))
     b10:	89 b3       	in	r24, 0x19	; 25
     b12:	80 34       	cpi	r24, 0x40	; 64
     b14:	01 f7       	brne	.-64     	; 0xad6 <color_Detection+0x66>
     b16:	d4 cf       	rjmp	.-88     	; 0xac0 <color_Detection+0x50>
			}
			color_select=0;
		}
	}
	return black_shoes;
}
     b18:	ce 01       	movw	r24, r28
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <Sound>:


//buzzer code
void Sound()
{
	DDRB  |= (1<<PB7);// Configure pin DDB0 as the output of buzzer
     b20:	87 b3       	in	r24, 0x17	; 23
     b22:	80 68       	ori	r24, 0x80	; 128
     b24:	87 bb       	out	0x17, r24	; 23
	int error=1;
		if(error==1){
			PORTB=PORTB |(1<<7);/* Switch is open, pin_status = 1, buzzer will sound;*/
     b26:	88 b3       	in	r24, 0x18	; 24
     b28:	80 68       	ori	r24, 0x80	; 128
     b2a:	88 bb       	out	0x18, r24	; 24
     b2c:	2f ef       	ldi	r18, 0xFF	; 255
     b2e:	80 e7       	ldi	r24, 0x70	; 112
     b30:	92 e0       	ldi	r25, 0x02	; 2
     b32:	21 50       	subi	r18, 0x01	; 1
     b34:	80 40       	sbci	r24, 0x00	; 0
     b36:	90 40       	sbci	r25, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <Sound+0x12>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <Sound+0x1c>
     b3c:	00 00       	nop
			_delay_ms(50);
			PORTB=PORTB &(~(1<<7));
     b3e:	88 b3       	in	r24, 0x18	; 24
     b40:	8f 77       	andi	r24, 0x7F	; 127
     b42:	88 bb       	out	0x18, r24	; 24
     b44:	08 95       	ret

00000b46 <main>:
int color_Detection();
void Sound();


int main()
{
     b46:	8f 92       	push	r8
     b48:	9f 92       	push	r9
     b4a:	af 92       	push	r10
     b4c:	bf 92       	push	r11
     b4e:	cf 92       	push	r12
     b50:	df 92       	push	r13
     b52:	ef 92       	push	r14
     b54:	ff 92       	push	r15
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
	DDRA=DDRA &(~(1<<7))&(~(1<<6))&(~(1<<4))&(~(1<<5));		//button
     b5e:	8a b3       	in	r24, 0x1a	; 26
     b60:	8f 70       	andi	r24, 0x0F	; 15
     b62:	8a bb       	out	0x1a, r24	; 26
	DDRA  |= (1<<PA0);  //port pa1 output
     b64:	8a b3       	in	r24, 0x1a	; 26
     b66:	81 60       	ori	r24, 0x01	; 1
     b68:	8a bb       	out	0x1a, r24	; 26
	DDRC  |= (1<<PC1); //port pc1 output
     b6a:	84 b3       	in	r24, 0x14	; 20
     b6c:	82 60       	ori	r24, 0x02	; 2
     b6e:	84 bb       	out	0x14, r24	; 20
	DDRA  |= (1<<PA2);  //port pa2 output
     b70:	8a b3       	in	r24, 0x1a	; 26
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	8a bb       	out	0x1a, r24	; 26
	DDRA  |= (1<<PA3);  //port pa3 output
     b76:	8a b3       	in	r24, 0x1a	; 26
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	8a bb       	out	0x1a, r24	; 26
	DDRD = DDRD |(1<<7)|(1<<6)|(1<<4)|(1<<5);
     b7c:	81 b3       	in	r24, 0x11	; 17
     b7e:	80 6f       	ori	r24, 0xF0	; 240
     b80:	81 bb       	out	0x11, r24	; 17
	lcd_init();
     b82:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_init>
	int interface=1;
	int black,other,color,dry=1;
	int size= maxShoe();
     b86:	0e 94 b0 03 	call	0x760	; 0x760 <maxShoe>
     b8a:	5c 01       	movw	r10, r24
	
	black=black_polish_level();
     b8c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <black_polish_level>
     b90:	6c 01       	movw	r12, r24
	other=other_polish_level();
     b92:	0e 94 13 05 	call	0xa26	; 0xa26 <other_polish_level>
     b96:	7c 01       	movw	r14, r24
	color=color_Detection();
     b98:	0e 94 38 05 	call	0xa70	; 0xa70 <color_Detection>
     b9c:	8c 01       	movw	r16, r24
	
	lcd_cmd(0x01);
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_cmd(0x80);	//1st row
     ba4:	80 e8       	ldi	r24, 0x80	; 128
     ba6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_str("1. Quick START");
     baa:	8b e2       	ldi	r24, 0x2B	; 43
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	lcd_cmd(0xC0);  //2nd row
     bb2:	80 ec       	ldi	r24, 0xC0	; 192
     bb4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
	lcd_str("2. Setting");
     bb8:	8a e3       	ldi	r24, 0x3A	; 58
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
	DDRA  |= (1<<PA2);  //port pa2 output
	DDRA  |= (1<<PA3);  //port pa3 output
	DDRD = DDRD |(1<<7)|(1<<6)|(1<<4)|(1<<5);
	lcd_init();
	int interface=1;
	int black,other,color,dry=1;
     bc0:	88 24       	eor	r8, r8
     bc2:	83 94       	inc	r8
     bc4:	91 2c       	mov	r9, r1
	DDRC  |= (1<<PC1); //port pc1 output
	DDRA  |= (1<<PA2);  //port pa2 output
	DDRA  |= (1<<PA3);  //port pa3 output
	DDRD = DDRD |(1<<7)|(1<<6)|(1<<4)|(1<<5);
	lcd_init();
	int interface=1;
     bc6:	c1 e0       	ldi	r28, 0x01	; 1
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
	lcd_str("2. Setting");
	
	
	while (1)
	{		
		if (PINA==(1<<4))   //quick start button
     bca:	89 b3       	in	r24, 0x19	; 25
     bcc:	80 31       	cpi	r24, 0x10	; 16
     bce:	09 f0       	breq	.+2      	; 0xbd2 <main+0x8c>
     bd0:	2a c2       	rjmp	.+1108   	; 0x1026 <main+0x4e0>
		{
			black=black_polish_level();
     bd2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <black_polish_level>
     bd6:	6c 01       	movw	r12, r24
			other=other_polish_level();
     bd8:	0e 94 13 05 	call	0xa26	; 0xa26 <other_polish_level>
     bdc:	7c 01       	movw	r14, r24
			color=color_Detection();
     bde:	0e 94 38 05 	call	0xa70	; 0xa70 <color_Detection>
     be2:	8c 01       	movw	r16, r24
     be4:	2f ef       	ldi	r18, 0xFF	; 255
     be6:	85 ea       	ldi	r24, 0xA5	; 165
     be8:	9e e0       	ldi	r25, 0x0E	; 14
     bea:	21 50       	subi	r18, 0x01	; 1
     bec:	80 40       	sbci	r24, 0x00	; 0
     bee:	90 40       	sbci	r25, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <main+0xa4>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <main+0xae>
     bf4:	00 00       	nop
			_delay_ms(300);
			
			if (color==1)	//black color shoes detect
     bf6:	01 30       	cpi	r16, 0x01	; 1
     bf8:	11 05       	cpc	r17, r1
     bfa:	09 f0       	breq	.+2      	; 0xbfe <main+0xb8>
     bfc:	0a c1       	rjmp	.+532    	; 0xe12 <main+0x2cc>
			{
				lcd_cmd(0x01);  //clear display
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
				lcd_rc(1,1);
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Black Color");
     c0c:	85 e4       	ldi	r24, 0x45	; 69
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
				lcd_rc(2,1);
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	82 e0       	ldi	r24, 0x02	; 2
     c18:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Detected");
     c1c:	81 e5       	ldi	r24, 0x51	; 81
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     c24:	2f ef       	ldi	r18, 0xFF	; 255
     c26:	85 ea       	ldi	r24, 0xA5	; 165
     c28:	9e e0       	ldi	r25, 0x0E	; 14
     c2a:	21 50       	subi	r18, 0x01	; 1
     c2c:	80 40       	sbci	r24, 0x00	; 0
     c2e:	90 40       	sbci	r25, 0x00	; 0
     c30:	e1 f7       	brne	.-8      	; 0xc2a <main+0xe4>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <main+0xee>
     c34:	00 00       	nop
				_delay_ms(300);
				
				if (black==1)	//black polish level high
     c36:	21 e0       	ldi	r18, 0x01	; 1
     c38:	c2 16       	cp	r12, r18
     c3a:	d1 04       	cpc	r13, r1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <main+0xfa>
     c3e:	ca c0       	rjmp	.+404    	; 0xdd4 <main+0x28e>
				{
					if (dry==1)		//if dry fan activated 1, deactivated 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	88 16       	cp	r8, r24
     c44:	91 04       	cpc	r9, r1
     c46:	a9 f4       	brne	.+42     	; 0xc72 <main+0x12c>
					{
						lcd_cmd(0x01);  //clear display
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_rc(1,1);
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
						lcd_str("Dry-Fan is");
     c56:	8a e5       	ldi	r24, 0x5A	; 90
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						lcd_rc(2,1);
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	82 e0       	ldi	r24, 0x02	; 2
     c62:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
						lcd_str("Activated");
     c66:	85 e6       	ldi	r24, 0x65	; 101
     c68:	91 e0       	ldi	r25, 0x01	; 1
     c6a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						dryfan();	//dryfan working
     c6e:	0e 94 53 04 	call	0x8a6	; 0x8a6 <dryfan>
					}
				
					lcd_cmd(0x01);
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_cmd(0x80);	//1st row display
     c78:	80 e8       	ldi	r24, 0x80	; 128
     c7a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Machine Status :");
     c7e:	8f e6       	ldi	r24, 0x6F	; 111
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_cmd(0xC0);  //2nd row display
     c86:	80 ec       	ldi	r24, 0xC0	; 192
     c88:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Polishing");
     c8c:	80 e8       	ldi	r24, 0x80	; 128
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					
					if (size>=1 && size<5)
     c94:	c5 01       	movw	r24, r10
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	04 97       	sbiw	r24, 0x04	; 4
     c9a:	28 f5       	brcc	.+74     	; 0xce6 <main+0x1a0>
					{   
						PORTD|=(1<<4);	//pipe carrying motor1 on
     c9c:	82 b3       	in	r24, 0x12	; 18
     c9e:	80 61       	ori	r24, 0x10	; 16
     ca0:	82 bb       	out	0x12, r24	; 18
						PORTA|=(1<<0);	//pump motor on
     ca2:	8b b3       	in	r24, 0x1b	; 27
     ca4:	81 60       	ori	r24, 0x01	; 1
     ca6:	8b bb       	out	0x1b, r24	; 27
     ca8:	9f ef       	ldi	r25, 0xFF	; 255
     caa:	20 e8       	ldi	r18, 0x80	; 128
     cac:	89 e2       	ldi	r24, 0x29	; 41
     cae:	91 50       	subi	r25, 0x01	; 1
     cb0:	20 40       	sbci	r18, 0x00	; 0
     cb2:	80 40       	sbci	r24, 0x00	; 0
     cb4:	e1 f7       	brne	.-8      	; 0xcae <main+0x168>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <main+0x172>
     cb8:	00 00       	nop
						_delay_ms(850);
						PORTA&=~(1<<0);	//pump motor off
     cba:	8b b3       	in	r24, 0x1b	; 27
     cbc:	8e 7f       	andi	r24, 0xFE	; 254
     cbe:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<4);	//pipe carrying motor1 off
     cc0:	82 b3       	in	r24, 0x12	; 18
     cc2:	8f 7e       	andi	r24, 0xEF	; 239
     cc4:	82 bb       	out	0x12, r24	; 18
						
							PORTD|=(1<<5);		//motor 1 on pipe back to the start position
     cc6:	82 b3       	in	r24, 0x12	; 18
     cc8:	80 62       	ori	r24, 0x20	; 32
     cca:	82 bb       	out	0x12, r24	; 18
     ccc:	9f ef       	ldi	r25, 0xFF	; 255
     cce:	20 e8       	ldi	r18, 0x80	; 128
     cd0:	89 e2       	ldi	r24, 0x29	; 41
     cd2:	91 50       	subi	r25, 0x01	; 1
     cd4:	20 40       	sbci	r18, 0x00	; 0
     cd6:	80 40       	sbci	r24, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0x18c>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <main+0x196>
     cdc:	00 00       	nop
							_delay_ms(850);
							PORTD&=~(1<<5);
     cde:	82 b3       	in	r24, 0x12	; 18
     ce0:	8f 7d       	andi	r24, 0xDF	; 223
     ce2:	82 bb       	out	0x12, r24	; 18
     ce4:	5f c0       	rjmp	.+190    	; 0xda4 <main+0x25e>
						
					}else if (size>=5 && size<10)
     ce6:	c5 01       	movw	r24, r10
     ce8:	05 97       	sbiw	r24, 0x05	; 5
     cea:	05 97       	sbiw	r24, 0x05	; 5
     cec:	28 f5       	brcc	.+74     	; 0xd38 <main+0x1f2>
					{
						//PORTA = 0x05; //pump motor on
						PORTA|=(1<<0);
     cee:	8b b3       	in	r24, 0x1b	; 27
     cf0:	81 60       	ori	r24, 0x01	; 1
     cf2:	8b bb       	out	0x1b, r24	; 27
						PORTD|=(1<<4);	//pipe carrying motor1 on
     cf4:	82 b3       	in	r24, 0x12	; 18
     cf6:	80 61       	ori	r24, 0x10	; 16
     cf8:	82 bb       	out	0x12, r24	; 18
     cfa:	9f ef       	ldi	r25, 0xFF	; 255
     cfc:	2e e9       	ldi	r18, 0x9E	; 158
     cfe:	84 e2       	ldi	r24, 0x24	; 36
     d00:	91 50       	subi	r25, 0x01	; 1
     d02:	20 40       	sbci	r18, 0x00	; 0
     d04:	80 40       	sbci	r24, 0x00	; 0
     d06:	e1 f7       	brne	.-8      	; 0xd00 <main+0x1ba>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <main+0x1c4>
     d0a:	00 00       	nop
						_delay_ms(750);
						PORTA&=~(1<<0);  //pump motor off
     d0c:	8b b3       	in	r24, 0x1b	; 27
     d0e:	8e 7f       	andi	r24, 0xFE	; 254
     d10:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<4);		//pipe carrying motor1 off
     d12:	82 b3       	in	r24, 0x12	; 18
     d14:	8f 7e       	andi	r24, 0xEF	; 239
     d16:	82 bb       	out	0x12, r24	; 18
						
						PORTD|=(1<<5);		//motor 1 on pipe back to the start position
     d18:	82 b3       	in	r24, 0x12	; 18
     d1a:	80 62       	ori	r24, 0x20	; 32
     d1c:	82 bb       	out	0x12, r24	; 18
     d1e:	9f ef       	ldi	r25, 0xFF	; 255
     d20:	2e e9       	ldi	r18, 0x9E	; 158
     d22:	84 e2       	ldi	r24, 0x24	; 36
     d24:	91 50       	subi	r25, 0x01	; 1
     d26:	20 40       	sbci	r18, 0x00	; 0
     d28:	80 40       	sbci	r24, 0x00	; 0
     d2a:	e1 f7       	brne	.-8      	; 0xd24 <main+0x1de>
     d2c:	00 c0       	rjmp	.+0      	; 0xd2e <main+0x1e8>
     d2e:	00 00       	nop
						_delay_ms(750);
						PORTD&=~(1<<5);
     d30:	82 b3       	in	r24, 0x12	; 18
     d32:	8f 7d       	andi	r24, 0xDF	; 223
     d34:	82 bb       	out	0x12, r24	; 18
     d36:	36 c0       	rjmp	.+108    	; 0xda4 <main+0x25e>
						
					}else if (size>=10 && size<15)
     d38:	c5 01       	movw	r24, r10
     d3a:	0a 97       	sbiw	r24, 0x0a	; 10
     d3c:	05 97       	sbiw	r24, 0x05	; 5
     d3e:	28 f5       	brcc	.+74     	; 0xd8a <main+0x244>
					{
						//PORTA = 0x05;	//pump motor on
						PORTA|=(1<<0);
     d40:	8b b3       	in	r24, 0x1b	; 27
     d42:	81 60       	ori	r24, 0x01	; 1
     d44:	8b bb       	out	0x1b, r24	; 27
						PORTD|=(1<<4);	//pipe carrying motor1 on
     d46:	82 b3       	in	r24, 0x12	; 18
     d48:	80 61       	ori	r24, 0x10	; 16
     d4a:	82 bb       	out	0x12, r24	; 18
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
     d4e:	2c eb       	ldi	r18, 0xBC	; 188
     d50:	8f e1       	ldi	r24, 0x1F	; 31
     d52:	91 50       	subi	r25, 0x01	; 1
     d54:	20 40       	sbci	r18, 0x00	; 0
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <main+0x20c>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <main+0x216>
     d5c:	00 00       	nop
						_delay_ms(650);
						PORTA&=~(1<<0);	//pump motor off
     d5e:	8b b3       	in	r24, 0x1b	; 27
     d60:	8e 7f       	andi	r24, 0xFE	; 254
     d62:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<4);		//pipe carrying motor1 off
     d64:	82 b3       	in	r24, 0x12	; 18
     d66:	8f 7e       	andi	r24, 0xEF	; 239
     d68:	82 bb       	out	0x12, r24	; 18
						
						PORTD|=(1<<5);		//motor 1 on pipe back to the start position
     d6a:	82 b3       	in	r24, 0x12	; 18
     d6c:	80 62       	ori	r24, 0x20	; 32
     d6e:	82 bb       	out	0x12, r24	; 18
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	2c eb       	ldi	r18, 0xBC	; 188
     d74:	8f e1       	ldi	r24, 0x1F	; 31
     d76:	91 50       	subi	r25, 0x01	; 1
     d78:	20 40       	sbci	r18, 0x00	; 0
     d7a:	80 40       	sbci	r24, 0x00	; 0
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <main+0x230>
     d7e:	00 c0       	rjmp	.+0      	; 0xd80 <main+0x23a>
     d80:	00 00       	nop
						_delay_ms(650);
						PORTD&=~(1<<5);
     d82:	82 b3       	in	r24, 0x12	; 18
     d84:	8f 7d       	andi	r24, 0xDF	; 223
     d86:	82 bb       	out	0x12, r24	; 18
     d88:	0d c0       	rjmp	.+26     	; 0xda4 <main+0x25e>
					}
					else{
						lcd_cmd(0x01);
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_cmd(0x80);	//1st row
     d90:	80 e8       	ldi	r24, 0x80	; 128
     d92:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_str("Shoe size Error");
     d96:	8a e8       	ldi	r24, 0x8A	; 138
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						Sound();
     d9e:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
						break;								//shoe should be under 35cm and over 19cm
     da2:	a4 c1       	rjmp	.+840    	; 0x10ec <main+0x5a6>
					}
					
					black_brush();							// black polish brush motor working
     da4:	0e 94 95 04 	call	0x92a	; 0x92a <black_brush>
					dryfan();
     da8:	0e 94 53 04 	call	0x8a6	; 0x8a6 <dryfan>
					
					lcd_cmd(0x01);
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_cmd(0x80);	//1st row
     db2:	80 e8       	ldi	r24, 0x80	; 128
     db4:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Polishing");
     db8:	80 e8       	ldi	r24, 0x80	; 128
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_cmd(0xC0);  //2nd row
     dc0:	80 ec       	ldi	r24, 0xC0	; 192
     dc2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Completed !!!");
     dc6:	8a e9       	ldi	r24, 0x9A	; 154
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					Sound();
     dce:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
     dd2:	fb ce       	rjmp	.-522    	; 0xbca <main+0x84>
				}
				else{
					lcd_cmd(0x01);  //clear display
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_rc(1,1);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
					lcd_str("Black Polish is");
     de2:	88 ea       	ldi	r24, 0xA8	; 168
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_rc(2,1);
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
					lcd_str("level Low");
     df2:	88 eb       	ldi	r24, 0xB8	; 184
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					Sound();
     dfa:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
     dfe:	9f ef       	ldi	r25, 0xFF	; 255
     e00:	25 ea       	ldi	r18, 0xA5	; 165
     e02:	8e e0       	ldi	r24, 0x0E	; 14
     e04:	91 50       	subi	r25, 0x01	; 1
     e06:	20 40       	sbci	r18, 0x00	; 0
     e08:	80 40       	sbci	r24, 0x00	; 0
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <main+0x2be>
     e0c:	00 c0       	rjmp	.+0      	; 0xe0e <main+0x2c8>
     e0e:	00 00       	nop
     e10:	dc ce       	rjmp	.-584    	; 0xbca <main+0x84>
					_delay_ms(300);
				}
			}
			else{							//other color shoes detect
				lcd_cmd(0x01);				
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
				lcd_rc(1,1);
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Other Colour");
     e20:	82 ec       	ldi	r24, 0xC2	; 194
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
				lcd_rc(2,1);
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	82 e0       	ldi	r24, 0x02	; 2
     e2c:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
				lcd_str("Detected");
     e30:	81 e5       	ldi	r24, 0x51	; 81
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
     e38:	9f ef       	ldi	r25, 0xFF	; 255
     e3a:	25 ea       	ldi	r18, 0xA5	; 165
     e3c:	8e e0       	ldi	r24, 0x0E	; 14
     e3e:	91 50       	subi	r25, 0x01	; 1
     e40:	20 40       	sbci	r18, 0x00	; 0
     e42:	80 40       	sbci	r24, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <main+0x2f8>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <main+0x302>
     e48:	00 00       	nop
				_delay_ms(300);
				
				if (other==1)					//black polish level high							
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	e9 16       	cp	r14, r25
     e4e:	f1 04       	cpc	r15, r1
     e50:	09 f0       	breq	.+2      	; 0xe54 <main+0x30e>
     e52:	ca c0       	rjmp	.+404    	; 0xfe8 <main+0x4a2>
				{
					if (dry==1)					//if dry fan activated 1, deactivated 0
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	82 16       	cp	r8, r18
     e58:	91 04       	cpc	r9, r1
     e5a:	a9 f4       	brne	.+42     	; 0xe86 <main+0x340>
					{
						lcd_cmd(0x01);			
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_rc(1,1);
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
						lcd_str("Dry-Fan is");
     e6a:	8a e5       	ldi	r24, 0x5A	; 90
     e6c:	91 e0       	ldi	r25, 0x01	; 1
     e6e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						lcd_rc(2,1);
     e72:	61 e0       	ldi	r22, 0x01	; 1
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
						lcd_str("Activated");
     e7a:	85 e6       	ldi	r24, 0x65	; 101
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						dryfan();				//dryfan activated
     e82:	0e 94 53 04 	call	0x8a6	; 0x8a6 <dryfan>
					}
			
					lcd_cmd(0x01);
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_cmd(0x80);	//1st row
     e8c:	80 e8       	ldi	r24, 0x80	; 128
     e8e:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Machine Status :");
     e92:	8f e6       	ldi	r24, 0x6F	; 111
     e94:	91 e0       	ldi	r25, 0x01	; 1
     e96:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_cmd(0xC0);  //2nd row
     e9a:	80 ec       	ldi	r24, 0xC0	; 192
     e9c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Polishing");
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					
					if (size>=1 && size<5)
     ea8:	c5 01       	movw	r24, r10
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	04 97       	sbiw	r24, 0x04	; 4
     eae:	28 f5       	brcc	.+74     	; 0xefa <main+0x3b4>
					{
						PORTA|=(1<<2);		//pump motor on
     eb0:	8b b3       	in	r24, 0x1b	; 27
     eb2:	84 60       	ori	r24, 0x04	; 4
     eb4:	8b bb       	out	0x1b, r24	; 27
						PORTD|=(1<<6);		//pipe carrying motor2 on
     eb6:	82 b3       	in	r24, 0x12	; 18
     eb8:	80 64       	ori	r24, 0x40	; 64
     eba:	82 bb       	out	0x12, r24	; 18
     ebc:	8f ef       	ldi	r24, 0xFF	; 255
     ebe:	90 e8       	ldi	r25, 0x80	; 128
     ec0:	29 e2       	ldi	r18, 0x29	; 41
     ec2:	81 50       	subi	r24, 0x01	; 1
     ec4:	90 40       	sbci	r25, 0x00	; 0
     ec6:	20 40       	sbci	r18, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <main+0x37c>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <main+0x386>
     ecc:	00 00       	nop
						_delay_ms(850);
						PORTA&=~(1<<2);		//pump motor off
     ece:	8b b3       	in	r24, 0x1b	; 27
     ed0:	8b 7f       	andi	r24, 0xFB	; 251
     ed2:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<6);		//pipe carrying motor2 off
     ed4:	82 b3       	in	r24, 0x12	; 18
     ed6:	8f 7b       	andi	r24, 0xBF	; 191
     ed8:	82 bb       	out	0x12, r24	; 18
						
						PORTD|=(1<<7);		//motor 1 (pipe back to the start position)
     eda:	82 b3       	in	r24, 0x12	; 18
     edc:	80 68       	ori	r24, 0x80	; 128
     ede:	82 bb       	out	0x12, r24	; 18
     ee0:	8f ef       	ldi	r24, 0xFF	; 255
     ee2:	90 e8       	ldi	r25, 0x80	; 128
     ee4:	29 e2       	ldi	r18, 0x29	; 41
     ee6:	81 50       	subi	r24, 0x01	; 1
     ee8:	90 40       	sbci	r25, 0x00	; 0
     eea:	20 40       	sbci	r18, 0x00	; 0
     eec:	e1 f7       	brne	.-8      	; 0xee6 <main+0x3a0>
     eee:	00 c0       	rjmp	.+0      	; 0xef0 <main+0x3aa>
     ef0:	00 00       	nop
						_delay_ms(850);
						PORTD&=~(1<<7);		
     ef2:	82 b3       	in	r24, 0x12	; 18
     ef4:	8f 77       	andi	r24, 0x7F	; 127
     ef6:	82 bb       	out	0x12, r24	; 18
     ef8:	5f c0       	rjmp	.+190    	; 0xfb8 <main+0x472>
						
					}else if (size>=5 && size<10)
     efa:	c5 01       	movw	r24, r10
     efc:	05 97       	sbiw	r24, 0x05	; 5
     efe:	05 97       	sbiw	r24, 0x05	; 5
     f00:	28 f5       	brcc	.+74     	; 0xf4c <main+0x406>
					{
						PORTA|=(1<<2);		//pump motor on
     f02:	8b b3       	in	r24, 0x1b	; 27
     f04:	84 60       	ori	r24, 0x04	; 4
     f06:	8b bb       	out	0x1b, r24	; 27
						PORTD|=(1<<6);		//pipe carrying motor2 on
     f08:	82 b3       	in	r24, 0x12	; 18
     f0a:	80 64       	ori	r24, 0x40	; 64
     f0c:	82 bb       	out	0x12, r24	; 18
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9e e9       	ldi	r25, 0x9E	; 158
     f12:	24 e2       	ldi	r18, 0x24	; 36
     f14:	81 50       	subi	r24, 0x01	; 1
     f16:	90 40       	sbci	r25, 0x00	; 0
     f18:	20 40       	sbci	r18, 0x00	; 0
     f1a:	e1 f7       	brne	.-8      	; 0xf14 <main+0x3ce>
     f1c:	00 c0       	rjmp	.+0      	; 0xf1e <main+0x3d8>
     f1e:	00 00       	nop
						_delay_ms(750);
						PORTA&=~(1<<2);		//pump motor off
     f20:	8b b3       	in	r24, 0x1b	; 27
     f22:	8b 7f       	andi	r24, 0xFB	; 251
     f24:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<6);		//pipe carrying motor2 off
     f26:	82 b3       	in	r24, 0x12	; 18
     f28:	8f 7b       	andi	r24, 0xBF	; 191
     f2a:	82 bb       	out	0x12, r24	; 18
						
						PORTD|=(1<<7);		//motor 1 (pipe back to the start position)
     f2c:	82 b3       	in	r24, 0x12	; 18
     f2e:	80 68       	ori	r24, 0x80	; 128
     f30:	82 bb       	out	0x12, r24	; 18
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	9e e9       	ldi	r25, 0x9E	; 158
     f36:	24 e2       	ldi	r18, 0x24	; 36
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	20 40       	sbci	r18, 0x00	; 0
     f3e:	e1 f7       	brne	.-8      	; 0xf38 <main+0x3f2>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <main+0x3fc>
     f42:	00 00       	nop
						_delay_ms(750);
						PORTD&=~(1<<7);		
     f44:	82 b3       	in	r24, 0x12	; 18
     f46:	8f 77       	andi	r24, 0x7F	; 127
     f48:	82 bb       	out	0x12, r24	; 18
     f4a:	36 c0       	rjmp	.+108    	; 0xfb8 <main+0x472>
						
					}else if (size>=10 && size<15)
     f4c:	c5 01       	movw	r24, r10
     f4e:	0a 97       	sbiw	r24, 0x0a	; 10
     f50:	05 97       	sbiw	r24, 0x05	; 5
     f52:	28 f5       	brcc	.+74     	; 0xf9e <main+0x458>
					{
						PORTA|=(1<<2);		//pump motor on
     f54:	8b b3       	in	r24, 0x1b	; 27
     f56:	84 60       	ori	r24, 0x04	; 4
     f58:	8b bb       	out	0x1b, r24	; 27
						PORTD|=(1<<6);		//pipe carrying motor2 on
     f5a:	82 b3       	in	r24, 0x12	; 18
     f5c:	80 64       	ori	r24, 0x40	; 64
     f5e:	82 bb       	out	0x12, r24	; 18
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9c eb       	ldi	r25, 0xBC	; 188
     f64:	2f e1       	ldi	r18, 0x1F	; 31
     f66:	81 50       	subi	r24, 0x01	; 1
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	20 40       	sbci	r18, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <main+0x420>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <main+0x42a>
     f70:	00 00       	nop
						_delay_ms(650);
						PORTA&=~(1<<2);		//pump motor off
     f72:	8b b3       	in	r24, 0x1b	; 27
     f74:	8b 7f       	andi	r24, 0xFB	; 251
     f76:	8b bb       	out	0x1b, r24	; 27
						PORTD&=~(1<<6);		//pipe carrying motor2 off
     f78:	82 b3       	in	r24, 0x12	; 18
     f7a:	8f 7b       	andi	r24, 0xBF	; 191
     f7c:	82 bb       	out	0x12, r24	; 18
						
						PORTD|=(1<<7);		//motor 1 (pipe back to the start position)
     f7e:	82 b3       	in	r24, 0x12	; 18
     f80:	80 68       	ori	r24, 0x80	; 128
     f82:	82 bb       	out	0x12, r24	; 18
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	9c eb       	ldi	r25, 0xBC	; 188
     f88:	2f e1       	ldi	r18, 0x1F	; 31
     f8a:	81 50       	subi	r24, 0x01	; 1
     f8c:	90 40       	sbci	r25, 0x00	; 0
     f8e:	20 40       	sbci	r18, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <main+0x444>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <main+0x44e>
     f94:	00 00       	nop
						_delay_ms(650);
						PORTD&=~(1<<7);		
     f96:	82 b3       	in	r24, 0x12	; 18
     f98:	8f 77       	andi	r24, 0x7F	; 127
     f9a:	82 bb       	out	0x12, r24	; 18
     f9c:	0d c0       	rjmp	.+26     	; 0xfb8 <main+0x472>
						
					}else{
						lcd_cmd(0x01);
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_cmd(0x80);	//1st row
     fa4:	80 e8       	ldi	r24, 0x80	; 128
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_str("Shoe size Error");
     faa:	8a e8       	ldi	r24, 0x8A	; 138
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						Sound();
     fb2:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
						break;				//shoe should be under 35cm and over 19cm
     fb6:	9a c0       	rjmp	.+308    	; 0x10ec <main+0x5a6>
					}
					
					other_brush();			// black polish brush motor working
     fb8:	0e 94 c2 04 	call	0x984	; 0x984 <other_brush>
					dryfan();				
     fbc:	0e 94 53 04 	call	0x8a6	; 0x8a6 <dryfan>

					lcd_cmd(0x01);
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_cmd(0x80);	//1st row
     fc6:	80 e8       	ldi	r24, 0x80	; 128
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Polishing");
     fcc:	80 e8       	ldi	r24, 0x80	; 128
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_cmd(0xC0);  //2nd row 
     fd4:	80 ec       	ldi	r24, 0xC0	; 192
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_str("Completed !!!");
     fda:	8a e9       	ldi	r24, 0x9A	; 154
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					Sound();
     fe2:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
     fe6:	f1 cd       	rjmp	.-1054   	; 0xbca <main+0x84>
					}
					
					else{
					lcd_cmd(0x01);  //clear display
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
					lcd_rc(1,1);
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
					lcd_str("Other Polish is");
     ff6:	8f ec       	ldi	r24, 0xCF	; 207
     ff8:	91 e0       	ldi	r25, 0x01	; 1
     ffa:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					lcd_rc(2,1);
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	0e 94 bc 00 	call	0x178	; 0x178 <lcd_rc>
					lcd_str("level Low");
    1006:	88 eb       	ldi	r24, 0xB8	; 184
    1008:	91 e0       	ldi	r25, 0x01	; 1
    100a:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
					Sound();
    100e:	0e 94 90 05 	call	0xb20	; 0xb20 <Sound>
    1012:	8f ef       	ldi	r24, 0xFF	; 255
    1014:	95 ea       	ldi	r25, 0xA5	; 165
    1016:	2e e0       	ldi	r18, 0x0E	; 14
    1018:	81 50       	subi	r24, 0x01	; 1
    101a:	90 40       	sbci	r25, 0x00	; 0
    101c:	20 40       	sbci	r18, 0x00	; 0
    101e:	e1 f7       	brne	.-8      	; 0x1018 <main+0x4d2>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <main+0x4dc>
    1022:	00 00       	nop
    1024:	d2 cd       	rjmp	.-1116   	; 0xbca <main+0x84>
				}
			}
			
		}
		
		else if (PINA==(1<<5))	//Menu	
    1026:	89 b3       	in	r24, 0x19	; 25
    1028:	80 32       	cpi	r24, 0x20	; 32
    102a:	09 f0       	breq	.+2      	; 0x102e <main+0x4e8>
    102c:	ce cd       	rjmp	.-1124   	; 0xbca <main+0x84>
		{
			if (interface == 1){
    102e:	c1 30       	cpi	r28, 0x01	; 1
    1030:	d1 05       	cpc	r29, r1
    1032:	39 f4       	brne	.+14     	; 0x1042 <main+0x4fc>
				
				info(size,color); 
    1034:	b8 01       	movw	r22, r16
    1036:	c5 01       	movw	r24, r10
    1038:	0e 94 77 02 	call	0x4ee	; 0x4ee <info>
				interface=2;
    103c:	c2 e0       	ldi	r28, 0x02	; 2
    103e:	d0 e0       	ldi	r29, 0x00	; 0
    1040:	c4 cd       	rjmp	.-1144   	; 0xbca <main+0x84>
			}
			else if (interface==2)
    1042:	c2 30       	cpi	r28, 0x02	; 2
    1044:	d1 05       	cpc	r29, r1
    1046:	39 f4       	brne	.+14     	; 0x1056 <main+0x510>
			{
				mainscr(black,other); 
    1048:	b7 01       	movw	r22, r14
    104a:	c6 01       	movw	r24, r12
    104c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <mainscr>
				interface=3;
    1050:	c3 e0       	ldi	r28, 0x03	; 3
    1052:	d0 e0       	ldi	r29, 0x00	; 0
    1054:	ba cd       	rjmp	.-1164   	; 0xbca <main+0x84>
			}
			else if (interface==3)
    1056:	c3 30       	cpi	r28, 0x03	; 3
    1058:	d1 05       	cpc	r29, r1
    105a:	09 f0       	breq	.+2      	; 0x105e <main+0x518>
    105c:	b6 cd       	rjmp	.-1172   	; 0xbca <main+0x84>
			{
				fanscr(dry);		
    105e:	c4 01       	movw	r24, r8
    1060:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fanscr>
				int select=0;
    1064:	c0 e0       	ldi	r28, 0x00	; 0
    1066:	d0 e0       	ldi	r29, 0x00	; 0
				while (select==0)
    1068:	3c c0       	rjmp	.+120    	; 0x10e2 <main+0x59c>
				{
					if(PINA==(1<<7))  //high
    106a:	89 b3       	in	r24, 0x19	; 25
    106c:	80 38       	cpi	r24, 0x80	; 128
    106e:	41 f4       	brne	.+16     	; 0x1080 <main+0x53a>
					{
						select=0; 
						dry=1;		// activated
						fanscr(dry);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fanscr>
				while (select==0)
				{
					if(PINA==(1<<7))  //high
					{
						select=0; 
						dry=1;		// activated
    1078:	88 24       	eor	r8, r8
    107a:	83 94       	inc	r8
    107c:	91 2c       	mov	r9, r1
    107e:	31 c0       	rjmp	.+98     	; 0x10e2 <main+0x59c>
						fanscr(dry);
					}
					else if (PINA==(1<<6)) //low
    1080:	89 b3       	in	r24, 0x19	; 25
    1082:	80 34       	cpi	r24, 0x40	; 64
    1084:	39 f4       	brne	.+14     	; 0x1094 <main+0x54e>
					{
						select=0; 
						dry=0;		// Deactivated
						fanscr(dry);
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <fanscr>
						fanscr(dry);
					}
					else if (PINA==(1<<6)) //low
					{
						select=0; 
						dry=0;		// Deactivated
    108e:	81 2c       	mov	r8, r1
    1090:	91 2c       	mov	r9, r1
    1092:	27 c0       	rjmp	.+78     	; 0x10e2 <main+0x59c>
						fanscr(dry);
					}
					else if (PINA==(1<<4))   //save button
    1094:	89 b3       	in	r24, 0x19	; 25
    1096:	80 31       	cpi	r24, 0x10	; 16
    1098:	f9 f4       	brne	.+62     	; 0x10d8 <main+0x592>
					{
						select=1;		 
						updated();
    109a:	0e 94 12 03 	call	0x624	; 0x624 <updated>
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	90 e7       	ldi	r25, 0x70	; 112
    10a2:	22 e0       	ldi	r18, 0x02	; 2
    10a4:	81 50       	subi	r24, 0x01	; 1
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	20 40       	sbci	r18, 0x00	; 0
    10aa:	e1 f7       	brne	.-8      	; 0x10a4 <main+0x55e>
    10ac:	00 c0       	rjmp	.+0      	; 0x10ae <main+0x568>
    10ae:	00 00       	nop
						_delay_ms(50);
						
						lcd_cmd(0x01);
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_cmd(0x80);	//1st row
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_str("1. Quick START");
    10bc:	8b e2       	ldi	r24, 0x2B	; 43
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						lcd_cmd(0xC0);  //2nd row
    10c4:	80 ec       	ldi	r24, 0xC0	; 192
    10c6:	0e 94 49 00 	call	0x92	; 0x92 <lcd_cmd>
						lcd_str("2. Setting");
    10ca:	8a e3       	ldi	r24, 0x3A	; 58
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 af 00 	call	0x15e	; 0x15e <lcd_str>
						dry=0;		// Deactivated
						fanscr(dry);
					}
					else if (PINA==(1<<4))   //save button
					{
						select=1;		 
    10d2:	c1 e0       	ldi	r28, 0x01	; 1
    10d4:	d0 e0       	ldi	r29, 0x00	; 0
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <main+0x59c>
						lcd_str("1. Quick START");
						lcd_cmd(0xC0);  //2nd row
						lcd_str("2. Setting");
						
					}
					else if (PINA==(1<<5)) //exit without saving
    10d8:	89 b3       	in	r24, 0x19	; 25
    10da:	80 32       	cpi	r24, 0x20	; 32
    10dc:	11 f4       	brne	.+4      	; 0x10e2 <main+0x59c>
					{
						interface=1;
						select=1;
    10de:	c1 e0       	ldi	r28, 0x01	; 1
    10e0:	d0 e0       	ldi	r29, 0x00	; 0
			}
			else if (interface==3)
			{
				fanscr(dry);		
				int select=0;
				while (select==0)
    10e2:	20 97       	sbiw	r28, 0x00	; 0
    10e4:	11 f2       	breq	.-124    	; 0x106a <main+0x524>
					{
						interface=1;
						select=1;
					}
				}
				interface=1;
    10e6:	c1 e0       	ldi	r28, 0x01	; 1
    10e8:	d0 e0       	ldi	r29, 0x00	; 0
    10ea:	6f cd       	rjmp	.-1314   	; 0xbca <main+0x84>
			}
		}
	}
}
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	bf 90       	pop	r11
    1102:	af 90       	pop	r10
    1104:	9f 90       	pop	r9
    1106:	8f 90       	pop	r8
    1108:	08 95       	ret

0000110a <__subsf3>:
    110a:	50 58       	subi	r21, 0x80	; 128

0000110c <__addsf3>:
    110c:	bb 27       	eor	r27, r27
    110e:	aa 27       	eor	r26, r26
    1110:	0e 94 9d 08 	call	0x113a	; 0x113a <__addsf3x>
    1114:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_round>
    1118:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscA>
    111c:	38 f0       	brcs	.+14     	; 0x112c <__addsf3+0x20>
    111e:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_pscB>
    1122:	20 f0       	brcs	.+8      	; 0x112c <__addsf3+0x20>
    1124:	39 f4       	brne	.+14     	; 0x1134 <__addsf3+0x28>
    1126:	9f 3f       	cpi	r25, 0xFF	; 255
    1128:	19 f4       	brne	.+6      	; 0x1130 <__addsf3+0x24>
    112a:	26 f4       	brtc	.+8      	; 0x1134 <__addsf3+0x28>
    112c:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_nan>
    1130:	0e f4       	brtc	.+2      	; 0x1134 <__addsf3+0x28>
    1132:	e0 95       	com	r30
    1134:	e7 fb       	bst	r30, 7
    1136:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_inf>

0000113a <__addsf3x>:
    113a:	e9 2f       	mov	r30, r25
    113c:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_split3>
    1140:	58 f3       	brcs	.-42     	; 0x1118 <__addsf3+0xc>
    1142:	ba 17       	cp	r27, r26
    1144:	62 07       	cpc	r22, r18
    1146:	73 07       	cpc	r23, r19
    1148:	84 07       	cpc	r24, r20
    114a:	95 07       	cpc	r25, r21
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__addsf3x+0x1c>
    114e:	79 f4       	brne	.+30     	; 0x116e <__addsf3x+0x34>
    1150:	a6 f5       	brtc	.+104    	; 0x11ba <__addsf3x+0x80>
    1152:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_zero>
    1156:	0e f4       	brtc	.+2      	; 0x115a <__addsf3x+0x20>
    1158:	e0 95       	com	r30
    115a:	0b 2e       	mov	r0, r27
    115c:	ba 2f       	mov	r27, r26
    115e:	a0 2d       	mov	r26, r0
    1160:	0b 01       	movw	r0, r22
    1162:	b9 01       	movw	r22, r18
    1164:	90 01       	movw	r18, r0
    1166:	0c 01       	movw	r0, r24
    1168:	ca 01       	movw	r24, r20
    116a:	a0 01       	movw	r20, r0
    116c:	11 24       	eor	r1, r1
    116e:	ff 27       	eor	r31, r31
    1170:	59 1b       	sub	r21, r25
    1172:	99 f0       	breq	.+38     	; 0x119a <__addsf3x+0x60>
    1174:	59 3f       	cpi	r21, 0xF9	; 249
    1176:	50 f4       	brcc	.+20     	; 0x118c <__addsf3x+0x52>
    1178:	50 3e       	cpi	r21, 0xE0	; 224
    117a:	68 f1       	brcs	.+90     	; 0x11d6 <__addsf3x+0x9c>
    117c:	1a 16       	cp	r1, r26
    117e:	f0 40       	sbci	r31, 0x00	; 0
    1180:	a2 2f       	mov	r26, r18
    1182:	23 2f       	mov	r18, r19
    1184:	34 2f       	mov	r19, r20
    1186:	44 27       	eor	r20, r20
    1188:	58 5f       	subi	r21, 0xF8	; 248
    118a:	f3 cf       	rjmp	.-26     	; 0x1172 <__addsf3x+0x38>
    118c:	46 95       	lsr	r20
    118e:	37 95       	ror	r19
    1190:	27 95       	ror	r18
    1192:	a7 95       	ror	r26
    1194:	f0 40       	sbci	r31, 0x00	; 0
    1196:	53 95       	inc	r21
    1198:	c9 f7       	brne	.-14     	; 0x118c <__addsf3x+0x52>
    119a:	7e f4       	brtc	.+30     	; 0x11ba <__addsf3x+0x80>
    119c:	1f 16       	cp	r1, r31
    119e:	ba 0b       	sbc	r27, r26
    11a0:	62 0b       	sbc	r22, r18
    11a2:	73 0b       	sbc	r23, r19
    11a4:	84 0b       	sbc	r24, r20
    11a6:	ba f0       	brmi	.+46     	; 0x11d6 <__addsf3x+0x9c>
    11a8:	91 50       	subi	r25, 0x01	; 1
    11aa:	a1 f0       	breq	.+40     	; 0x11d4 <__addsf3x+0x9a>
    11ac:	ff 0f       	add	r31, r31
    11ae:	bb 1f       	adc	r27, r27
    11b0:	66 1f       	adc	r22, r22
    11b2:	77 1f       	adc	r23, r23
    11b4:	88 1f       	adc	r24, r24
    11b6:	c2 f7       	brpl	.-16     	; 0x11a8 <__addsf3x+0x6e>
    11b8:	0e c0       	rjmp	.+28     	; 0x11d6 <__addsf3x+0x9c>
    11ba:	ba 0f       	add	r27, r26
    11bc:	62 1f       	adc	r22, r18
    11be:	73 1f       	adc	r23, r19
    11c0:	84 1f       	adc	r24, r20
    11c2:	48 f4       	brcc	.+18     	; 0x11d6 <__addsf3x+0x9c>
    11c4:	87 95       	ror	r24
    11c6:	77 95       	ror	r23
    11c8:	67 95       	ror	r22
    11ca:	b7 95       	ror	r27
    11cc:	f7 95       	ror	r31
    11ce:	9e 3f       	cpi	r25, 0xFE	; 254
    11d0:	08 f0       	brcs	.+2      	; 0x11d4 <__addsf3x+0x9a>
    11d2:	b0 cf       	rjmp	.-160    	; 0x1134 <__addsf3+0x28>
    11d4:	93 95       	inc	r25
    11d6:	88 0f       	add	r24, r24
    11d8:	08 f0       	brcs	.+2      	; 0x11dc <__addsf3x+0xa2>
    11da:	99 27       	eor	r25, r25
    11dc:	ee 0f       	add	r30, r30
    11de:	97 95       	ror	r25
    11e0:	87 95       	ror	r24
    11e2:	08 95       	ret

000011e4 <__fixsfsi>:
    11e4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <__fixunssfsi>
    11e8:	68 94       	set
    11ea:	b1 11       	cpse	r27, r1
    11ec:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_szero>
    11f0:	08 95       	ret

000011f2 <__fixunssfsi>:
    11f2:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_splitA>
    11f6:	88 f0       	brcs	.+34     	; 0x121a <__fixunssfsi+0x28>
    11f8:	9f 57       	subi	r25, 0x7F	; 127
    11fa:	98 f0       	brcs	.+38     	; 0x1222 <__fixunssfsi+0x30>
    11fc:	b9 2f       	mov	r27, r25
    11fe:	99 27       	eor	r25, r25
    1200:	b7 51       	subi	r27, 0x17	; 23
    1202:	b0 f0       	brcs	.+44     	; 0x1230 <__fixunssfsi+0x3e>
    1204:	e1 f0       	breq	.+56     	; 0x123e <__fixunssfsi+0x4c>
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	1a f0       	brmi	.+6      	; 0x1216 <__fixunssfsi+0x24>
    1210:	ba 95       	dec	r27
    1212:	c9 f7       	brne	.-14     	; 0x1206 <__fixunssfsi+0x14>
    1214:	14 c0       	rjmp	.+40     	; 0x123e <__fixunssfsi+0x4c>
    1216:	b1 30       	cpi	r27, 0x01	; 1
    1218:	91 f0       	breq	.+36     	; 0x123e <__fixunssfsi+0x4c>
    121a:	0e 94 af 09 	call	0x135e	; 0x135e <__fp_zero>
    121e:	b1 e0       	ldi	r27, 0x01	; 1
    1220:	08 95       	ret
    1222:	0c 94 af 09 	jmp	0x135e	; 0x135e <__fp_zero>
    1226:	67 2f       	mov	r22, r23
    1228:	78 2f       	mov	r23, r24
    122a:	88 27       	eor	r24, r24
    122c:	b8 5f       	subi	r27, 0xF8	; 248
    122e:	39 f0       	breq	.+14     	; 0x123e <__fixunssfsi+0x4c>
    1230:	b9 3f       	cpi	r27, 0xF9	; 249
    1232:	cc f3       	brlt	.-14     	; 0x1226 <__fixunssfsi+0x34>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b3 95       	inc	r27
    123c:	d9 f7       	brne	.-10     	; 0x1234 <__fixunssfsi+0x42>
    123e:	3e f4       	brtc	.+14     	; 0x124e <__fixunssfsi+0x5c>
    1240:	90 95       	com	r25
    1242:	80 95       	com	r24
    1244:	70 95       	com	r23
    1246:	61 95       	neg	r22
    1248:	7f 4f       	sbci	r23, 0xFF	; 255
    124a:	8f 4f       	sbci	r24, 0xFF	; 255
    124c:	9f 4f       	sbci	r25, 0xFF	; 255
    124e:	08 95       	ret

00001250 <__floatunsisf>:
    1250:	e8 94       	clt
    1252:	09 c0       	rjmp	.+18     	; 0x1266 <__floatsisf+0x12>

00001254 <__floatsisf>:
    1254:	97 fb       	bst	r25, 7
    1256:	3e f4       	brtc	.+14     	; 0x1266 <__floatsisf+0x12>
    1258:	90 95       	com	r25
    125a:	80 95       	com	r24
    125c:	70 95       	com	r23
    125e:	61 95       	neg	r22
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	8f 4f       	sbci	r24, 0xFF	; 255
    1264:	9f 4f       	sbci	r25, 0xFF	; 255
    1266:	99 23       	and	r25, r25
    1268:	a9 f0       	breq	.+42     	; 0x1294 <__floatsisf+0x40>
    126a:	f9 2f       	mov	r31, r25
    126c:	96 e9       	ldi	r25, 0x96	; 150
    126e:	bb 27       	eor	r27, r27
    1270:	93 95       	inc	r25
    1272:	f6 95       	lsr	r31
    1274:	87 95       	ror	r24
    1276:	77 95       	ror	r23
    1278:	67 95       	ror	r22
    127a:	b7 95       	ror	r27
    127c:	f1 11       	cpse	r31, r1
    127e:	f8 cf       	rjmp	.-16     	; 0x1270 <__floatsisf+0x1c>
    1280:	fa f4       	brpl	.+62     	; 0x12c0 <__floatsisf+0x6c>
    1282:	bb 0f       	add	r27, r27
    1284:	11 f4       	brne	.+4      	; 0x128a <__floatsisf+0x36>
    1286:	60 ff       	sbrs	r22, 0
    1288:	1b c0       	rjmp	.+54     	; 0x12c0 <__floatsisf+0x6c>
    128a:	6f 5f       	subi	r22, 0xFF	; 255
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	16 c0       	rjmp	.+44     	; 0x12c0 <__floatsisf+0x6c>
    1294:	88 23       	and	r24, r24
    1296:	11 f0       	breq	.+4      	; 0x129c <__floatsisf+0x48>
    1298:	96 e9       	ldi	r25, 0x96	; 150
    129a:	11 c0       	rjmp	.+34     	; 0x12be <__floatsisf+0x6a>
    129c:	77 23       	and	r23, r23
    129e:	21 f0       	breq	.+8      	; 0x12a8 <__floatsisf+0x54>
    12a0:	9e e8       	ldi	r25, 0x8E	; 142
    12a2:	87 2f       	mov	r24, r23
    12a4:	76 2f       	mov	r23, r22
    12a6:	05 c0       	rjmp	.+10     	; 0x12b2 <__floatsisf+0x5e>
    12a8:	66 23       	and	r22, r22
    12aa:	71 f0       	breq	.+28     	; 0x12c8 <__floatsisf+0x74>
    12ac:	96 e8       	ldi	r25, 0x86	; 134
    12ae:	86 2f       	mov	r24, r22
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	2a f0       	brmi	.+10     	; 0x12c0 <__floatsisf+0x6c>
    12b6:	9a 95       	dec	r25
    12b8:	66 0f       	add	r22, r22
    12ba:	77 1f       	adc	r23, r23
    12bc:	88 1f       	adc	r24, r24
    12be:	da f7       	brpl	.-10     	; 0x12b6 <__floatsisf+0x62>
    12c0:	88 0f       	add	r24, r24
    12c2:	96 95       	lsr	r25
    12c4:	87 95       	ror	r24
    12c6:	97 f9       	bld	r25, 7
    12c8:	08 95       	ret

000012ca <__fp_inf>:
    12ca:	97 f9       	bld	r25, 7
    12cc:	9f 67       	ori	r25, 0x7F	; 127
    12ce:	80 e8       	ldi	r24, 0x80	; 128
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	60 e0       	ldi	r22, 0x00	; 0
    12d4:	08 95       	ret

000012d6 <__fp_nan>:
    12d6:	9f ef       	ldi	r25, 0xFF	; 255
    12d8:	80 ec       	ldi	r24, 0xC0	; 192
    12da:	08 95       	ret

000012dc <__fp_pscA>:
    12dc:	00 24       	eor	r0, r0
    12de:	0a 94       	dec	r0
    12e0:	16 16       	cp	r1, r22
    12e2:	17 06       	cpc	r1, r23
    12e4:	18 06       	cpc	r1, r24
    12e6:	09 06       	cpc	r0, r25
    12e8:	08 95       	ret

000012ea <__fp_pscB>:
    12ea:	00 24       	eor	r0, r0
    12ec:	0a 94       	dec	r0
    12ee:	12 16       	cp	r1, r18
    12f0:	13 06       	cpc	r1, r19
    12f2:	14 06       	cpc	r1, r20
    12f4:	05 06       	cpc	r0, r21
    12f6:	08 95       	ret

000012f8 <__fp_round>:
    12f8:	09 2e       	mov	r0, r25
    12fa:	03 94       	inc	r0
    12fc:	00 0c       	add	r0, r0
    12fe:	11 f4       	brne	.+4      	; 0x1304 <__fp_round+0xc>
    1300:	88 23       	and	r24, r24
    1302:	52 f0       	brmi	.+20     	; 0x1318 <__fp_round+0x20>
    1304:	bb 0f       	add	r27, r27
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__fp_round+0x20>
    1308:	bf 2b       	or	r27, r31
    130a:	11 f4       	brne	.+4      	; 0x1310 <__fp_round+0x18>
    130c:	60 ff       	sbrs	r22, 0
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__fp_round+0x20>
    1310:	6f 5f       	subi	r22, 0xFF	; 255
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__fp_split3>:
    131a:	57 fd       	sbrc	r21, 7
    131c:	90 58       	subi	r25, 0x80	; 128
    131e:	44 0f       	add	r20, r20
    1320:	55 1f       	adc	r21, r21
    1322:	59 f0       	breq	.+22     	; 0x133a <__fp_splitA+0x10>
    1324:	5f 3f       	cpi	r21, 0xFF	; 255
    1326:	71 f0       	breq	.+28     	; 0x1344 <__fp_splitA+0x1a>
    1328:	47 95       	ror	r20

0000132a <__fp_splitA>:
    132a:	88 0f       	add	r24, r24
    132c:	97 fb       	bst	r25, 7
    132e:	99 1f       	adc	r25, r25
    1330:	61 f0       	breq	.+24     	; 0x134a <__fp_splitA+0x20>
    1332:	9f 3f       	cpi	r25, 0xFF	; 255
    1334:	79 f0       	breq	.+30     	; 0x1354 <__fp_splitA+0x2a>
    1336:	87 95       	ror	r24
    1338:	08 95       	ret
    133a:	12 16       	cp	r1, r18
    133c:	13 06       	cpc	r1, r19
    133e:	14 06       	cpc	r1, r20
    1340:	55 1f       	adc	r21, r21
    1342:	f2 cf       	rjmp	.-28     	; 0x1328 <__fp_split3+0xe>
    1344:	46 95       	lsr	r20
    1346:	f1 df       	rcall	.-30     	; 0x132a <__fp_splitA>
    1348:	08 c0       	rjmp	.+16     	; 0x135a <__fp_splitA+0x30>
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	18 06       	cpc	r1, r24
    1350:	99 1f       	adc	r25, r25
    1352:	f1 cf       	rjmp	.-30     	; 0x1336 <__fp_splitA+0xc>
    1354:	86 95       	lsr	r24
    1356:	71 05       	cpc	r23, r1
    1358:	61 05       	cpc	r22, r1
    135a:	08 94       	sec
    135c:	08 95       	ret

0000135e <__fp_zero>:
    135e:	e8 94       	clt

00001360 <__fp_szero>:
    1360:	bb 27       	eor	r27, r27
    1362:	66 27       	eor	r22, r22
    1364:	77 27       	eor	r23, r23
    1366:	cb 01       	movw	r24, r22
    1368:	97 f9       	bld	r25, 7
    136a:	08 95       	ret

0000136c <__mulsf3>:
    136c:	0e 94 c9 09 	call	0x1392	; 0x1392 <__mulsf3x>
    1370:	0c 94 7c 09 	jmp	0x12f8	; 0x12f8 <__fp_round>
    1374:	0e 94 6e 09 	call	0x12dc	; 0x12dc <__fp_pscA>
    1378:	38 f0       	brcs	.+14     	; 0x1388 <__mulsf3+0x1c>
    137a:	0e 94 75 09 	call	0x12ea	; 0x12ea <__fp_pscB>
    137e:	20 f0       	brcs	.+8      	; 0x1388 <__mulsf3+0x1c>
    1380:	95 23       	and	r25, r21
    1382:	11 f0       	breq	.+4      	; 0x1388 <__mulsf3+0x1c>
    1384:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_inf>
    1388:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__fp_nan>
    138c:	11 24       	eor	r1, r1
    138e:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_szero>

00001392 <__mulsf3x>:
    1392:	0e 94 8d 09 	call	0x131a	; 0x131a <__fp_split3>
    1396:	70 f3       	brcs	.-36     	; 0x1374 <__mulsf3+0x8>

00001398 <__mulsf3_pse>:
    1398:	95 9f       	mul	r25, r21
    139a:	c1 f3       	breq	.-16     	; 0x138c <__mulsf3+0x20>
    139c:	95 0f       	add	r25, r21
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	55 1f       	adc	r21, r21
    13a2:	62 9f       	mul	r22, r18
    13a4:	f0 01       	movw	r30, r0
    13a6:	72 9f       	mul	r23, r18
    13a8:	bb 27       	eor	r27, r27
    13aa:	f0 0d       	add	r31, r0
    13ac:	b1 1d       	adc	r27, r1
    13ae:	63 9f       	mul	r22, r19
    13b0:	aa 27       	eor	r26, r26
    13b2:	f0 0d       	add	r31, r0
    13b4:	b1 1d       	adc	r27, r1
    13b6:	aa 1f       	adc	r26, r26
    13b8:	64 9f       	mul	r22, r20
    13ba:	66 27       	eor	r22, r22
    13bc:	b0 0d       	add	r27, r0
    13be:	a1 1d       	adc	r26, r1
    13c0:	66 1f       	adc	r22, r22
    13c2:	82 9f       	mul	r24, r18
    13c4:	22 27       	eor	r18, r18
    13c6:	b0 0d       	add	r27, r0
    13c8:	a1 1d       	adc	r26, r1
    13ca:	62 1f       	adc	r22, r18
    13cc:	73 9f       	mul	r23, r19
    13ce:	b0 0d       	add	r27, r0
    13d0:	a1 1d       	adc	r26, r1
    13d2:	62 1f       	adc	r22, r18
    13d4:	83 9f       	mul	r24, r19
    13d6:	a0 0d       	add	r26, r0
    13d8:	61 1d       	adc	r22, r1
    13da:	22 1f       	adc	r18, r18
    13dc:	74 9f       	mul	r23, r20
    13de:	33 27       	eor	r19, r19
    13e0:	a0 0d       	add	r26, r0
    13e2:	61 1d       	adc	r22, r1
    13e4:	23 1f       	adc	r18, r19
    13e6:	84 9f       	mul	r24, r20
    13e8:	60 0d       	add	r22, r0
    13ea:	21 1d       	adc	r18, r1
    13ec:	82 2f       	mov	r24, r18
    13ee:	76 2f       	mov	r23, r22
    13f0:	6a 2f       	mov	r22, r26
    13f2:	11 24       	eor	r1, r1
    13f4:	9f 57       	subi	r25, 0x7F	; 127
    13f6:	50 40       	sbci	r21, 0x00	; 0
    13f8:	9a f0       	brmi	.+38     	; 0x1420 <__mulsf3_pse+0x88>
    13fa:	f1 f0       	breq	.+60     	; 0x1438 <__mulsf3_pse+0xa0>
    13fc:	88 23       	and	r24, r24
    13fe:	4a f0       	brmi	.+18     	; 0x1412 <__mulsf3_pse+0x7a>
    1400:	ee 0f       	add	r30, r30
    1402:	ff 1f       	adc	r31, r31
    1404:	bb 1f       	adc	r27, r27
    1406:	66 1f       	adc	r22, r22
    1408:	77 1f       	adc	r23, r23
    140a:	88 1f       	adc	r24, r24
    140c:	91 50       	subi	r25, 0x01	; 1
    140e:	50 40       	sbci	r21, 0x00	; 0
    1410:	a9 f7       	brne	.-22     	; 0x13fc <__mulsf3_pse+0x64>
    1412:	9e 3f       	cpi	r25, 0xFE	; 254
    1414:	51 05       	cpc	r21, r1
    1416:	80 f0       	brcs	.+32     	; 0x1438 <__mulsf3_pse+0xa0>
    1418:	0c 94 65 09 	jmp	0x12ca	; 0x12ca <__fp_inf>
    141c:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__fp_szero>
    1420:	5f 3f       	cpi	r21, 0xFF	; 255
    1422:	e4 f3       	brlt	.-8      	; 0x141c <__mulsf3_pse+0x84>
    1424:	98 3e       	cpi	r25, 0xE8	; 232
    1426:	d4 f3       	brlt	.-12     	; 0x141c <__mulsf3_pse+0x84>
    1428:	86 95       	lsr	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	f7 95       	ror	r31
    1432:	e7 95       	ror	r30
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	c1 f7       	brne	.-16     	; 0x1428 <__mulsf3_pse+0x90>
    1438:	fe 2b       	or	r31, r30
    143a:	88 0f       	add	r24, r24
    143c:	91 1d       	adc	r25, r1
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__itoa_ncheck>:
    1446:	bb 27       	eor	r27, r27
    1448:	4a 30       	cpi	r20, 0x0A	; 10
    144a:	31 f4       	brne	.+12     	; 0x1458 <__itoa_ncheck+0x12>
    144c:	99 23       	and	r25, r25
    144e:	22 f4       	brpl	.+8      	; 0x1458 <__itoa_ncheck+0x12>
    1450:	bd e2       	ldi	r27, 0x2D	; 45
    1452:	90 95       	com	r25
    1454:	81 95       	neg	r24
    1456:	9f 4f       	sbci	r25, 0xFF	; 255
    1458:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__utoa_common>

0000145c <__utoa_ncheck>:
    145c:	bb 27       	eor	r27, r27

0000145e <__utoa_common>:
    145e:	fb 01       	movw	r30, r22
    1460:	55 27       	eor	r21, r21
    1462:	aa 27       	eor	r26, r26
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	aa 1f       	adc	r26, r26
    146a:	a4 17       	cp	r26, r20
    146c:	10 f0       	brcs	.+4      	; 0x1472 <__utoa_common+0x14>
    146e:	a4 1b       	sub	r26, r20
    1470:	83 95       	inc	r24
    1472:	50 51       	subi	r21, 0x10	; 16
    1474:	b9 f7       	brne	.-18     	; 0x1464 <__utoa_common+0x6>
    1476:	a0 5d       	subi	r26, 0xD0	; 208
    1478:	aa 33       	cpi	r26, 0x3A	; 58
    147a:	08 f0       	brcs	.+2      	; 0x147e <__utoa_common+0x20>
    147c:	a9 5d       	subi	r26, 0xD9	; 217
    147e:	a1 93       	st	Z+, r26
    1480:	00 97       	sbiw	r24, 0x00	; 0
    1482:	79 f7       	brne	.-34     	; 0x1462 <__utoa_common+0x4>
    1484:	b1 11       	cpse	r27, r1
    1486:	b1 93       	st	Z+, r27
    1488:	11 92       	st	Z+, r1
    148a:	cb 01       	movw	r24, r22
    148c:	0c 94 48 0a 	jmp	0x1490	; 0x1490 <strrev>

00001490 <strrev>:
    1490:	dc 01       	movw	r26, r24
    1492:	fc 01       	movw	r30, r24
    1494:	67 2f       	mov	r22, r23
    1496:	71 91       	ld	r23, Z+
    1498:	77 23       	and	r23, r23
    149a:	e1 f7       	brne	.-8      	; 0x1494 <strrev+0x4>
    149c:	32 97       	sbiw	r30, 0x02	; 2
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <strrev+0x18>
    14a0:	7c 91       	ld	r23, X
    14a2:	6d 93       	st	X+, r22
    14a4:	70 83       	st	Z, r23
    14a6:	62 91       	ld	r22, -Z
    14a8:	ae 17       	cp	r26, r30
    14aa:	bf 07       	cpc	r27, r31
    14ac:	c8 f3       	brcs	.-14     	; 0x14a0 <strrev+0x10>
    14ae:	08 95       	ret

000014b0 <_exit>:
    14b0:	f8 94       	cli

000014b2 <__stop_program>:
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <__stop_program>
